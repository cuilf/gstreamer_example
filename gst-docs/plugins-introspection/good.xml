<plugins module_name="gst-plugins-good">
<plugin>
  <name>1394</name>
  <description>Source for video data via IEEE1394 interface</description>
  <filename>../../ext/raw1394/.libs/libgst1394.so</filename>
  <basename>libgst1394.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>dv1394src</name>
      <longname>Firewire (1394) DV video source</longname>
      <class>Source/Video</class>
      <description>Source for DV video data from firewire port</description>
      <author>Erik Walthinsen &lt;omega@temple-baptist.com&gt;, Daniel Fischer &lt;dan@f3c.com&gt;, Wim Taymans &lt;wim@fluendo.com&gt;, Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-dv, format=(string){ NTSC, PAL }, systemstream=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>hdv1394src</name>
      <longname>Firewire (1394) HDV video source</longname>
      <class>Source/Video</class>
      <description>Source for MPEG-TS video data from firewire port</description>
      <author>Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpegts, systemstream=(boolean)true, packetsize=(int)188</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>aasink</name>
  <description>ASCII Art video sink</description>
  <filename>../../ext/aalib/.libs/libgstaasink.so</filename>
  <basename>libgstaasink.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>aasink</name>
      <longname>ASCII art video sink</longname>
      <class>Sink/Video</class>
      <description>An ASCII art videosink</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>alaw</name>
  <description>ALaw audio conversion routines</description>
  <filename>../../gst/law/.libs/libgstalaw.so</filename>
  <basename>libgstalaw.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>alawdec</name>
      <longname>A Law audio decoder</longname>
      <class>Codec/Decoder/Audio</class>
      <description>Convert 8bit A law to 16bit PCM</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>alawenc</name>
      <longname>A Law audio encoder</longname>
      <class>Codec/Encoder/Audio</class>
      <description>Convert 16bit PCM to 8bit A law</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>alphacolor</name>
  <description>RGBA from/to AYUV colorspace conversion preserving the alpha channel</description>
  <filename>../../gst/alpha/.libs/libgstalphacolor.so</filename>
  <basename>libgstalphacolor.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>alphacolor</name>
      <longname>Alpha color filter</longname>
      <class>Filter/Converter/Video</class>
      <description>ARGB from/to AYUV colorspace conversion preserving the alpha channel</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBA, BGRA, ARGB, ABGR, AYUV }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBA, BGRA, ARGB, ABGR, AYUV }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>alpha</name>
  <description>adds an alpha channel to video - constant or via chroma-keying</description>
  <filename>../../gst/alpha/.libs/libgstalpha.so</filename>
  <basename>libgstalpha.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>alpha</name>
      <longname>Alpha filter</longname>
      <class>Filter/Effect/Video</class>
      <description>Adds an alpha channel to video - uniform or via chroma-keying</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;
Edward Hervey &lt;edward.hervey@collabora.co.uk&gt;
Jan Schmidt &lt;thaytan@noraisin.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>apetag</name>
  <description>APEv1/2 tag reader</description>
  <filename>../../gst/apetag/.libs/libgstapetag.so</filename>
  <basename>libgstapetag.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>apedemux</name>
      <longname>APE tag demuxer</longname>
      <class>Codec/Demuxer/Metadata</class>
      <description>Read and output APE tags while demuxing the contents</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-apetag</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>audiofx</name>
  <description>Audio effects plugin</description>
  <filename>../../gst/audiofx/.libs/libgstaudiofx.so</filename>
  <basename>libgstaudiofx.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>audioamplify</name>
      <longname>Audio amplifier</longname>
      <class>Filter/Effect/Audio</class>
      <description>Amplifies an audio stream by a given factor</description>
      <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S32LE, F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S32LE, F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiochebband</name>
      <longname>Band pass &amp; band reject filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Chebyshev band pass and band reject filter</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiocheblimit</name>
      <longname>Low pass &amp; high pass filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Chebyshev low pass and high pass filter</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiodynamic</name>
      <longname>Dynamic range controller</longname>
      <class>Filter/Effect/Audio</class>
      <description>Compressor and Expander</description>
      <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audioecho</name>
      <longname>Audio echo</longname>
      <class>Filter/Effect/Audio</class>
      <description>Adds an echo or reverb effect to an audio stream</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiofirfilter</name>
      <longname>Audio FIR filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Generic audio FIR filter with custom filter kernel</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audioiirfilter</name>
      <longname>Audio IIR filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Generic audio IIR filter with custom filter kernel</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audioinvert</name>
      <longname>Audio inversion</longname>
      <class>Filter/Effect/Audio</class>
      <description>Swaps upper and lower half of audio samples</description>
      <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string){ interleaved, non-interleaved }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiokaraoke</name>
      <longname>AudioKaraoke</longname>
      <class>Filter/Effect/Audio</class>
      <description>Removes voice from sound</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003, layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE }, rate=(int)[ 1, 2147483647 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003, layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiopanorama</name>
      <longname>Stereo positioning</longname>
      <class>Filter/Effect/Audio</class>
      <description>Positions audio streams in the stereo panorama</description>
      <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, rate=(int)[ 1, 2147483647 ], channels=(int)2, layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiowsincband</name>
      <longname>Band pass &amp; band reject filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Band pass and band reject windowed sinc filter</description>
      <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;, Steven W. Smith, Dreamlab Technologies Ltd. &lt;mathis.hofer@dreamlab.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>audiowsinclimit</name>
      <longname>Low pass &amp; high pass filter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Low pass and high pass windowed sinc filter</description>
      <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;, Steven W. Smith, Dreamlab Technologies Ltd. &lt;mathis.hofer@dreamlab.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>scaletempo</name>
      <longname>Scaletempo</longname>
      <class>Filter/Effect/Rate</class>
      <description>Sync audio tempo with playback rate</description>
      <author>Rov Juvano &lt;rovjuvano@users.sourceforge.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)F64LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)S16LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)F64LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string)S16LE, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>audioparsers</name>
  <description>Parsers for various audio formats</description>
  <filename>../../gst/audioparsers/.libs/libgstaudioparsers.so</filename>
  <basename>libgstaudioparsers.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>aacparse</name>
      <longname>AAC audio stream parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Advanced Audio Coding parser</description>
      <author>Stefan Kost &lt;stefan.kost@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int){ 2, 4 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, framed=(boolean)true, mpegversion=(int){ 2, 4 }, stream-format=(string){ raw, adts, adif, loas }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>ac3parse</name>
      <longname>AC3 audio stream parser</longname>
      <class>Codec/Parser/Converter/Audio</class>
      <description>AC3 parser</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-ac3; audio/x-eac3; audio/ac3; audio/x-private1-ac3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-ac3, framed=(boolean)true, channels=(int)[ 1, 6 ], rate=(int)[ 8000, 48000 ], alignment=(string){ iec61937, frame }; audio/x-eac3, framed=(boolean)true, channels=(int)[ 1, 6 ], rate=(int)[ 8000, 48000 ], alignment=(string){ iec61937, frame }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>amrparse</name>
      <longname>AMR audio stream parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Adaptive Multi-Rate audio parser</description>
      <author>Ronald Bultje &lt;rbultje@ronald.bitfreak.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-amr-nb-sh; audio/x-amr-wb-sh</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/AMR, rate=(int)8000, channels=(int)1; audio/AMR-WB, rate=(int)16000, channels=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>dcaparse</name>
      <longname>DTS Coherent Acoustics audio stream parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>DCA parser</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-dts; audio/x-private1-dts</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-dts, framed=(boolean)true, channels=(int)[ 1, 8 ], rate=(int)[ 8000, 192000 ], depth=(int){ 14, 16 }, endianness=(int){ 1234, 4321 }, block-size=(int)[ 1, 2147483647 ], frame-size=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>flacparse</name>
      <longname>FLAC audio parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Parses audio with the FLAC lossless audio codec</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-flac</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-flac, framed=(boolean)true, channels=(int)[ 1, 8 ], rate=(int)[ 1, 655350 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>mpegaudioparse</name>
      <longname>MPEG1 Audio Parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Parses and frames mpeg1 audio streams (levels 1-3), provides seek</description>
      <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;,Mark Nauwelaerts &lt;mark.nauwelaerts@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], mpegaudioversion=(int)[ 1, 3 ], rate=(int)[ 8000, 48000 ], channels=(int)[ 1, 2 ], parsed=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>sbcparse</name>
      <longname>SBC audio parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Parses an SBC bluetooth audio stream</description>
      <author>Tim-Philipp Müller &lt;tim.muller@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-sbc</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-sbc, parsed=(boolean)true, channels=(int)[ 1, 2 ], rate=(int){ 16000, 32000, 44100, 48000 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>wavpackparse</name>
      <longname>Wavpack audio stream parser</longname>
      <class>Codec/Parser/Audio</class>
      <description>Wavpack parser</description>
      <author>Mark Nauwelaerts &lt;mark.nauwelaerts@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-wavpack</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-wavpack, depth=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true; audio/x-wavpack-correction, framed=(boolean)true</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>auparse</name>
  <description>parses au streams</description>
  <filename>../../gst/auparse/.libs/libgstauparse.so</filename>
  <basename>libgstauparse.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>auparse</name>
      <longname>AU audio demuxer</longname>
      <class>Codec/Demuxer/Audio</class>
      <description>Parse an .au file into raw audio</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-au</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S16BE, S24LE, S24BE, S32LE, S32BE, F32LE, F32BE, F64LE, F64BE }, rate=(int)[ 8000, 192000 ], channels=(int)1, layout=(string)interleaved; audio/x-raw, format=(string){ S8, S16LE, S16BE, S24LE, S24BE, S32LE, S32BE, F32LE, F32BE, F64LE, F64BE }, rate=(int)[ 8000, 192000 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003, layout=(string)interleaved; audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]; audio/x-adpcm, layout=(string){ g721, g722, g723_3, g723_5 }</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>autodetect</name>
  <description>Plugin contains auto-detection plugins for video/audio in- and outputs</description>
  <filename>../../gst/autodetect/.libs/libgstautodetect.so</filename>
  <basename>libgstautodetect.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>autoaudiosink</name>
      <longname>Auto audio sink</longname>
      <class>Sink/Audio</class>
      <description>Wrapper audio sink for automatically detected audio sink</description>
      <author>Jan Schmidt &lt;thaytan@noraisin.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>autoaudiosrc</name>
      <longname>Auto audio source</longname>
      <class>Source/Audio</class>
      <description>Wrapper audio source for automatically detected audio source</description>
      <author>Jan Schmidt &lt;thaytan@noraisin.net&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>autovideosink</name>
      <longname>Auto video sink</longname>
      <class>Sink/Video</class>
      <description>Wrapper video sink for automatically detected video sink</description>
      <author>Jan Schmidt &lt;thaytan@noraisin.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>autovideosrc</name>
      <longname>Auto video source</longname>
      <class>Source/Video</class>
      <description>Wrapper video source for automatically detected video source</description>
      <author>Jan Schmidt &lt;thaytan@noraisin.net&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>avi</name>
  <description>AVI stream handling</description>
  <filename>../../gst/avi/.libs/libgstavi.so</filename>
  <basename>libgstavi.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>avidemux</name>
      <longname>Avi demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>Demultiplex an avi file into audio and video</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim.taymans@chello.be&gt;, Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-msvideo</details>
        </caps>
        <caps>
          <name>audio_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>audio/ms-gsm; audio/mpeg, mpegversion=(int)1, layer=(int)3; audio/mpeg, mpegversion=(int)1, layer=(int)2; audio/x-raw, format=(string){ S8, U8, S16LE, U16LE, S24LE, U24LE, S32LE, U32LE }, layout=(string)interleaved; audio/x-vorbis; audio/x-ac3; audio/x-dts; audio/mpeg, mpegversion=(int)4; audio/x-alaw; audio/x-mulaw; audio/x-wms, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)microsoft, block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, block_align=(int)[ 1, 2147483647 ]; audio/x-truespeech; audio/x-wma, wmaversion=(int)1, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)2, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)3, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-vnd.sony.atrac3; audio/x-raw, format=(string){ F32LE, F64LE }, layout=(string)interleaved; audio/x-voxware, voxwaretype=(int)117; audio/x-adpcm, layout=(string)dk4; audio/x-adpcm, layout=(string)dk3; audio/x-adpcm, layout=(string)dvi; audio/AMR; audio/AMR-WB; audio/x-siren; application/x-ogg-avi; audio/x-avi-unknown</details>
        </caps>
        <caps>
          <name>subpicture_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>subpicture/x-xsub</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-subtitle-avi</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-asus, asusversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-asus, asusversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-cirrus-logic-accupak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-camstudio, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-compressed-yuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string){ RGB8P, BGR, BGRx }, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-divx, divxversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-divx, divxversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-truemotion, trueversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-dv, systemstream=(boolean)false, dvversion=(int)25, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-dv, systemstream=(boolean)false, dvversion=(int)50, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-divx, divxversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-flash-video, flvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp6-flash, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)lucent, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-huffyuv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-intel-h263, variant=(string)intel, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)I420, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-indeo, indeoversion=(int)3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-indeo, indeoversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-indeo, indeoversion=(int)5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)lead, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h264, variant=(string)lead, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)microsoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; image/jpeg, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-msmpeg, msmpegversion=(int)42, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-msmpeg, msmpegversion=(int)43, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/mpeg, systemstream=(boolean)false, mpegversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-msmpeg, msmpegversion=(int)41, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-mszh, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; image/png, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-rle, layout=(string)microsoft, depth=(int)[ 1, 64 ], framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-indeo, indeoversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/sp5x, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-truemotion, trueversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-camtasia, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-ultimotion, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)UYVY, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-ati-vcr, vcrversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-ati-vcr, vcrversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)vdolive, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)vivo, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vmnc, version=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h264, variant=(string)videosoft, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-wmv, wmvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-wmv, wmvversion=(int)2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-wmv, wmvversion=(int)3, format=(string)WMV3, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-xan, wcversion=(int)4, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)YUY2, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)YVU9, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-zlib, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-cinepak, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h264, variant=(string)itu, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-msvideocodec, msvideoversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-h263, variant=(string)xirlink, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-dirac, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-ffv, ffvversion=(int)1, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-kmvc, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp5, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp6, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp6-flash, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp7, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-vp8, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-mimic, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-apple-video, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-theora, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-fraps, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-aasc, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)YV12, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-loco, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-zmbv, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)v210, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-raw, format=(string)r210, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ]; video/x-dv, systemstream=(boolean)true; video/x-avi-unknown</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>avimux</name>
      <longname>Avi muxer</longname>
      <class>Codec/Muxer</class>
      <description>Muxes audio and video into an avi stream</description>
      <author>GStreamer maintainers &lt;gstreamer-devel@lists.freedesktop.org&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-raw, format=(string){ U8, S16LE }, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ]; audio/x-ac3, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 6 ]; audio/x-alaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 1000, 48000 ], channels=(int)[ 1, 2 ]; audio/x-wma, rate=(int)[ 1000, 96000 ], channels=(int)[ 1, 2 ], wmaversion=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-raw, format=(string){ YUY2, I420, BGR, BGRx, BGRA, GRAY8, UYVY }, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; image/jpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-divx, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], divxversion=(int)[ 3, 5 ]; video/x-msmpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], msmpegversion=(int)[ 41, 43 ]; video/mpeg, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], mpegversion=(int){ 1, 2, 4 }, systemstream=(boolean)false; video/x-h263, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-h264, stream-format=(string)byte-stream, alignment=(string)au, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-dv, width=(int)720, height=(int){ 576, 480 }, framerate=(fraction)[ 0/1, 2147483647/1 ], systemstream=(boolean)false; video/x-huffyuv, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-wmv, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ], wmvversion=(int)[ 1, 3 ]; image/x-jpc, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-vp8, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; image/png, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-msvideo</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>avisubtitle</name>
      <longname>Avi subtitle parser</longname>
      <class>Codec/Parser/Subtitle</class>
      <description>Parse avi subtitle stream</description>
      <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-subtitle-avi</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-subtitle</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>cacasink</name>
  <description>Colored ASCII Art video sink</description>
  <filename>../../ext/libcaca/.libs/libgstcacasink.so</filename>
  <basename>libgstcacasink.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>cacasink</name>
      <longname>A colored ASCII art video sink</longname>
      <class>Sink/Video</class>
      <description>A colored ASCII art videosink</description>
      <author>Zeeshan Ali &lt;zak147@yahoo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGB, BGR, RGBx, xRGB, BGRx, xBGR, RGB16, RGB15 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>cairo</name>
  <description>Cairo-based elements</description>
  <filename>../../ext/cairo/.libs/libgstcairo.so</filename>
  <basename>libgstcairo.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>cairooverlay</name>
      <longname>Cairo overlay</longname>
      <class>Filter/Editor/Video</class>
      <description>Render overlay on a video stream using Cairo</description>
      <author>Jon Nordby &lt;jononor@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, BGRA, RGB16 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, BGRA, RGB16 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>cutter</name>
  <description>Audio Cutter to split audio into non-silent bits</description>
  <filename>../../gst/cutter/.libs/libgstcutter.so</filename>
  <basename>libgstcutter.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>cutter</name>
      <longname>Audio cutter</longname>
      <class>Filter/Editor/Audio</class>
      <description>Audio Cutter to split audio into non-silent bits</description>
      <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>debug</name>
  <description>elements for testing and debugging</description>
  <filename>../../gst/debugutils/.libs/libgstdebug.so</filename>
  <basename>libgstdebug.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>breakmydata</name>
      <longname>Break my data</longname>
      <class>Testing</class>
      <description>randomly change data in the stream</description>
      <author>Benjamin Otte &lt;otte@gnome&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>capssetter</name>
      <longname>CapsSetter</longname>
      <class>Generic</class>
      <description>Set/merge caps on stream</description>
      <author>Mark Nauwelaerts &lt;mnauw@users.sourceforge.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>cpureport</name>
      <longname>CPU report</longname>
      <class>Testing</class>
      <description>Post cpu usage information every buffer</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>navseek</name>
      <longname>Seek based on left-right arrows</longname>
      <class>Filter/Video</class>
      <description>Seek based on navigation keys left-right</description>
      <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>progressreport</name>
      <longname>Progress report</longname>
      <class>Testing</class>
      <description>Periodically query and report on processing progress</description>
      <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>pushfilesrc</name>
      <longname>Push File Source</longname>
      <class>Testing</class>
      <description>Implements pushfile:// URI-handler for push-based file access</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rndbuffersize</name>
      <longname>Random buffer size</longname>
      <class>Testing</class>
      <description>pull random sized buffers</description>
      <author>Stefan Kost &lt;stefan.kost@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>taginject</name>
      <longname>TagInject</longname>
      <class>Generic</class>
      <description>inject metadata tags</description>
      <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>testsink</name>
      <longname>Test plugin</longname>
      <class>Testing</class>
      <description>perform a number of tests</description>
      <author>Benjamin Otte &lt;otte@gnome&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>deinterlace</name>
  <description>Deinterlacer</description>
  <filename>../../gst/deinterlace/.libs/libgstdeinterlace.so</filename>
  <basename>libgstdeinterlace.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>deinterlace</name>
      <longname>Deinterlacer</longname>
      <class>Filter/Effect/Video/Deinterlace</class>
      <description>Deinterlace Methods ported from DScaler/TvTime</description>
      <author>Martin Eikermann &lt;meiker@upb.de&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, ABGR, RGBA, BGRA, Y444, xRGB, xBGR, RGBx, BGRx, RGB, BGR, YUY2, YVYU, UYVY, Y42B, I420, YV12, Y41B, NV12, NV21 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw(ANY), format=(string){ I420, YV12, YUY2, UYVY, AYUV, RGBx, BGRx, xRGB, xBGR, RGBA, BGRA, ARGB, ABGR, RGB, BGR, Y41B, Y42B, YVYU, Y444, v210, v216, NV12, NV21, NV16, NV61, NV24, GRAY8, GRAY16_BE, GRAY16_LE, v308, IYU2, RGB16, BGR16, RGB15, BGR15, UYVP, A420, RGB8P, YUV9, YVU9, IYU1, ARGB64, AYUV64, r210, I420_10LE, I420_10BE, I422_10LE, I422_10BE, Y444_10LE, Y444_10BE, GBR, GBR_10LE, GBR_10BE, NV12_64Z32, A420_10LE, A420_10BE, A422_10LE, A422_10BE, A444_10LE, A444_10BE, P010_10LE, P010_10BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, ABGR, RGBA, BGRA, Y444, xRGB, xBGR, RGBx, BGRx, RGB, BGR, YUY2, YVYU, UYVY, Y42B, I420, YV12, Y41B, NV12, NV21 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw(ANY), format=(string){ I420, YV12, YUY2, UYVY, AYUV, RGBx, BGRx, xRGB, xBGR, RGBA, BGRA, ARGB, ABGR, RGB, BGR, Y41B, Y42B, YVYU, Y444, v210, v216, NV12, NV21, NV16, NV61, NV24, GRAY8, GRAY16_BE, GRAY16_LE, v308, IYU2, RGB16, BGR16, RGB15, BGR15, UYVP, A420, RGB8P, YUV9, YVU9, IYU1, ARGB64, AYUV64, r210, I420_10LE, I420_10BE, I422_10LE, I422_10BE, Y444_10LE, Y444_10BE, GBR, GBR_10LE, GBR_10BE, NV12_64Z32, A420_10LE, A420_10BE, A422_10LE, A422_10BE, A444_10LE, A444_10BE, P010_10LE, P010_10BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>directsound</name>
  <description>DirectSound plugin</description>
  <filename>../../win32/vs6/release/libgstdirectsound.dll</filename>
  <basename>libgstdirectsound.dll</basename>
  <version>0.10.4.1</version>
  <license>LGPL</license>
  <source>gst-plugins-bad</source>
  <package>GStreamer Good Plug-ins CVS</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>directsoundsink</name>
      <longname>DirectSound audio sink</longname>
      <class>Sink/Audio</class>
      <description>DirectSound audio sink</description>
      <author>Sebastien Moutte &lt;sebastien@moutte.net&gt;</author>
    </element>
  </elements>
</plugin>
<plugin>
  <name>dtmf</name>
  <description>DTMF plugins</description>
  <filename>../../gst/dtmf/.libs/libgstdtmf.so</filename>
  <basename>libgstdtmf.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>dtmfsrc</name>
      <longname>DTMF tone generator</longname>
      <class>Source/Audio</class>
      <description>Generates DTMF tones</description>
      <author>Youness Alaoui &lt;youness.alaoui@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, rate=(int)[ 1, 2147483647 ], channels=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdtmfdepay</name>
      <longname>RTP DTMF packet depayloader</longname>
      <class>Codec/Depayloader/Network</class>
      <description>Generates DTMF Sound from telephone-event RTP packets</description>
      <author>Youness Alaoui &lt;youness.alaoui@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 0, 2147483647 ], encoding-name=(string)TELEPHONE-EVENT</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, rate=(int)[ 1, 2147483647 ], channels=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdtmfsrc</name>
      <longname>RTP DTMF packet generator</longname>
      <class>Source/Network</class>
      <description>Generates RTP DTMF packets</description>
      <author>Zeeshan Ali &lt;zeeshan.ali@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 0, 2147483647 ], encoding-name=(string)TELEPHONE-EVENT</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>dv</name>
  <description>DV demuxer and decoder based on libdv (libdv.sf.net)</description>
  <filename>../../ext/dv/.libs/libgstdv.so</filename>
  <basename>libgstdv.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>dvdec</name>
      <longname>DV video decoder</longname>
      <class>Codec/Decoder/Video</class>
      <description>Uses libdv to decode DV video (smpte314) (libdv.sourceforge.net)</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;,Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-dv, systemstream=(boolean)false</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ YUY2, BGRx, RGB }, framerate=(fraction)[ 1/1, 60/1 ], width=(int)720, height=(int){ 576, 480 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>dvdemux</name>
      <longname>DV system stream demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>Uses libdv to separate DV audio from DV video (libdv.sourceforge.net)</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-dv, systemstream=(boolean)true</details>
        </caps>
        <caps>
          <name>audio</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int){ 32000, 44100, 48000 }, channels=(int){ 2, 4 }</details>
        </caps>
        <caps>
          <name>video</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>video/x-dv, systemstream=(boolean)false</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>effectv</name>
  <description>effect plugins from the effectv project</description>
  <filename>../../gst/effectv/.libs/libgsteffectv.so</filename>
  <basename>libgsteffectv.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>agingtv</name>
      <longname>AgingTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>AgingTV adds age to video input using scratches and dust</description>
      <author>Sam Lantinga &lt;slouken@devolution.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>dicetv</name>
      <longname>DiceTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>&apos;Dices&apos; the screen up into many small squares</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>edgetv</name>
      <longname>EdgeTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>Apply edge detect on video</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>optv</name>
      <longname>OpTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>Optical art meets real-time video effect</description>
      <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>quarktv</name>
      <longname>QuarkTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>Motion dissolver</description>
      <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ xRGB, xBGR, BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ xRGB, xBGR, BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>radioactv</name>
      <longname>RadioacTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>motion-enlightment effect</description>
      <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>revtv</name>
      <longname>RevTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>A video waveform monitor for each line of video processed</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rippletv</name>
      <longname>RippleTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>RippleTV does ripple mark effect on the video input</description>
      <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx, xBGR, xRGB }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx, xBGR, xRGB }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>shagadelictv</name>
      <longname>ShagadelicTV</longname>
      <class>Filter/Effect/Video</class>
      <description>Oh behave, ShagedelicTV makes images shagadelic!</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>streaktv</name>
      <longname>StreakTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>StreakTV makes after images of moving objects</description>
      <author>FUKUCHI, Kentarou &lt;fukuchi@users.sourceforge.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx, xBGR, xRGB }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ BGRx, RGBx, xBGR, xRGB }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>vertigotv</name>
      <longname>VertigoTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>A loopback alpha blending effector with rotating and scaling</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>warptv</name>
      <longname>WarpTV effect</longname>
      <class>Filter/Effect/Video</class>
      <description>WarpTV does realtime goo&apos;ing of the video input</description>
      <author>Sam Lantinga &lt;slouken@devolution.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>equalizer</name>
  <description>GStreamer audio equalizers</description>
  <filename>../../gst/equalizer/.libs/libgstequalizer.so</filename>
  <basename>libgstequalizer.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>equalizer-10bands</name>
      <longname>10 Band Equalizer</longname>
      <class>Filter/Effect/Audio</class>
      <description>Direct Form 10 band IIR equalizer</description>
      <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>equalizer-3bands</name>
      <longname>3 Band Equalizer</longname>
      <class>Filter/Effect/Audio</class>
      <description>Direct Form 3 band IIR equalizer</description>
      <author>Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>equalizer-nbands</name>
      <longname>N Band Equalizer</longname>
      <class>Filter/Effect/Audio</class>
      <description>Direct Form IIR equalizer</description>
      <author>Benjamin Otte &lt;otte@gnome.org&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, F32LE, F64LE }, rate=(int)[ 1000, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>flac</name>
  <description>The FLAC Lossless compressor Codec</description>
  <filename>../../ext/flac/.libs/libgstflac.so</filename>
  <basename>libgstflac.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>flacdec</name>
      <longname>FLAC audio decoder</longname>
      <class>Codec/Decoder/Audio</class>
      <description>Decodes FLAC lossless audio streams</description>
      <author>Tim-Philipp Müller &lt;tim@centricular.net&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-flac, framed=(boolean)true, rate=(int)[ 1, 655350 ], channels=(int)[ 1, 8 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S24_32LE, S32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)[ 1, 8 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>flacenc</name>
      <longname>FLAC audio encoder</longname>
      <class>Codec/Encoder/Audio</class>
      <description>Encodes audio with the FLAC lossless audio encoder</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)1; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)3, channel-mask=(bitmask)0x0000000000000007; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)4, channel-mask=(bitmask)0x0000000000000033; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)5, channel-mask=(bitmask)0x0000000000000037; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)6, channel-mask=(bitmask)0x000000000000003f; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)7, channel-mask=(bitmask)0x000000000000013f; audio/x-raw, format=(string){ S8, S16LE, S24LE, S24_32LE }, layout=(string)interleaved, rate=(int)[ 1, 655350 ], channels=(int)8, channel-mask=(bitmask)0x0000000000000c3f</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-flac</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>flactag</name>
      <longname>FLAC tagger</longname>
      <class>Formatter/Metadata</class>
      <description>Rewrite tags in a FLAC file</description>
      <author>Christophe Fergeau &lt;teuf@gnome.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-flac</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-flac</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>flv</name>
  <description>FLV muxing and demuxing plugin</description>
  <filename>../../gst/flv/.libs/libgstflv.so</filename>
  <basename>libgstflv.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>flvdemux</name>
      <longname>FLV Demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>Demux FLV feeds into digital streams</description>
      <author>Julien Moutte &lt;julien@moutte.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-flv</details>
        </caps>
        <caps>
          <name>audio</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>audio/x-adpcm, layout=(string)swf, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/mpeg, mpegversion=(int)1, layer=(int)3, channels=(int){ 1, 2 }, rate=(int){ 5512, 8000, 11025, 22050, 44100 }, parsed=(boolean)true; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, framed=(boolean)true; audio/x-nellymoser, channels=(int){ 1, 2 }, rate=(int){ 5512, 8000, 11025, 16000, 22050, 44100 }; audio/x-raw, format=(string){ U8, S16LE }, layout=(string)interleaved, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-alaw, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-mulaw, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-speex, channels=(int)1, rate=(int)16000</details>
        </caps>
        <caps>
          <name>video</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>video/x-flash-video, flvversion=(int)1; video/x-flash-screen; video/x-vp6-flash; video/x-vp6-alpha; video/x-h264, stream-format=(string)avc</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>flvmux</name>
      <longname>FLV muxer</longname>
      <class>Codec/Muxer</class>
      <description>Muxes video/audio streams into a FLV stream</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>audio</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-adpcm, layout=(string)swf, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/mpeg, mpegversion=(int)1, layer=(int)3, channels=(int){ 1, 2 }, rate=(int){ 5512, 8000, 11025, 22050, 44100 }, parsed=(boolean)true; audio/mpeg, mpegversion=(int){ 4, 2 }, stream-format=(string)raw; audio/x-nellymoser, channels=(int){ 1, 2 }, rate=(int){ 5512, 8000, 11025, 16000, 22050, 44100 }; audio/x-raw, format=(string){ U8, S16LE }, layout=(string)interleaved, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-alaw, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-mulaw, channels=(int){ 1, 2 }, rate=(int){ 5512, 11025, 22050, 44100 }; audio/x-speex, channels=(int)1, rate=(int)16000</details>
        </caps>
        <caps>
          <name>video</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-flash-video; video/x-flash-screen; video/x-vp6-flash; video/x-vp6-alpha; video/x-h264, stream-format=(string)avc</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-flv</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>flxdec</name>
  <description>FLC/FLI/FLX video decoder</description>
  <filename>../../gst/flx/.libs/libgstflxdec.so</filename>
  <basename>libgstflxdec.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>flxdec</name>
      <longname>FLX video decoder</longname>
      <class>Codec/Decoder/Video</class>
      <description>FLC/FLI/FLX video decoder</description>
      <author>Sepp Wijnands &lt;mrrazz@garbage-coderz.net&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-fli</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>gdkpixbuf</name>
  <description>GdkPixbuf-based image decoder, overlay and sink</description>
  <filename>../../ext/gdk_pixbuf/.libs/libgstgdkpixbuf.so</filename>
  <basename>libgstgdkpixbuf.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>gdkpixbufdec</name>
      <longname>GdkPixbuf image decoder</longname>
      <class>Codec/Decoder/Image</class>
      <description>Decodes images in a video stream using GdkPixbuf</description>
      <author>David A. Schleef &lt;ds@schleef.org&gt;, Renato Filho &lt;renato.filho@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/png; image/gif; image/x-icon; application/x-navi-animation; image/x-cmu-raster; image/x-sun-raster; image/x-pixmap; image/tiff; image/x-portable-anymap; image/x-portable-bitmap; image/x-portable-graymap; image/x-portable-pixmap; image/bmp; image/x-bmp; image/x-MS-bmp; image/vnd.wap.wbmp; image/x-bitmap; image/x-tga; image/x-pcx; image/svg; image/svg+xml</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)RGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)RGBA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>gdkpixbufoverlay</name>
      <longname>GdkPixbuf Overlay</longname>
      <class>Filter/Effect/Video</class>
      <description>Overlay an image onto a video stream</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, RGB, BGR, BGRx, xRGB, xBGR, RGBA, BGRA, ARGB, ABGR, I420, YV12, AYUV, YUY2, UYVY, v308, v210, v216, Y41B, Y42B, Y444, YVYU, NV12, NV21, UYVP, RGB16, BGR16, RGB15, BGR15, UYVP, A420, YUV9, YVU9, IYU1, ARGB64, AYUV64, r210, I420_10LE, I420_10BE, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, RGB, BGR, BGRx, xRGB, xBGR, RGBA, BGRA, ARGB, ABGR, I420, YV12, AYUV, YUY2, UYVY, v308, v210, v216, Y41B, Y42B, Y444, YVYU, NV12, NV21, UYVP, RGB16, BGR16, RGB15, BGR15, UYVP, A420, YUV9, YVU9, IYU1, ARGB64, AYUV64, r210, I420_10LE, I420_10BE, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>gdkpixbufsink</name>
      <longname>GdkPixbuf sink</longname>
      <class>Sink/Video</class>
      <description>Output images as GdkPixbuf objects in bus messages</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)RGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)RGBA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>goom2k1</name>
  <description>GOOM 2k1 visualization filter</description>
  <filename>../../gst/goom2k1/.libs/libgstgoom2k1.so</filename>
  <basename>libgstgoom2k1.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>goom2k1</name>
      <longname>GOOM: what a GOOM! 2k1 edition</longname>
      <class>Visualization</class>
      <description>Takes frames of data and outputs video frames using the GOOM 2k1 filter</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, rate=(int)[ 8000, 96000 ], channels=(int)1, layout=(string)interleaved; audio/x-raw, format=(string)S16LE, rate=(int)[ 8000, 96000 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003, layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>goom</name>
  <description>GOOM visualization filter</description>
  <filename>../../gst/goom/.libs/libgstgoom.so</filename>
  <basename>libgstgoom.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>goom</name>
      <longname>GOOM: what a GOOM!</longname>
      <class>Visualization</class>
      <description>Takes frames of data and outputs video frames using the GOOM filter</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, rate=(int)[ 8000, 96000 ], channels=(int)1, layout=(string)interleaved; audio/x-raw, format=(string)S16LE, rate=(int)[ 8000, 96000 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003, layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>icydemux</name>
  <description>Demux ICY tags from a stream</description>
  <filename>../../gst/icydemux/.libs/libgsticydemux.so</filename>
  <basename>libgsticydemux.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>icydemux</name>
      <longname>ICY tag demuxer</longname>
      <class>Codec/Demuxer/Metadata</class>
      <description>Read and output ICY tags while demuxing the contents</description>
      <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;, Michael Smith &lt;msmith@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-icy, metadata-interval=(int)[ 0, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>id3demux</name>
  <description>Demux ID3v1 and ID3v2 tags from a file</description>
  <filename>../../gst/id3demux/.libs/libgstid3demux.so</filename>
  <basename>libgstid3demux.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>id3demux</name>
      <longname>ID3 tag demuxer</longname>
      <class>Codec/Demuxer/Metadata</class>
      <description>Read and output ID3v1 and ID3v2 tags while demuxing the contents</description>
      <author>Jan Schmidt &lt;thaytan@mad.scientist.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-id3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>imagefreeze</name>
  <description>Still frame stream generator</description>
  <filename>../../gst/imagefreeze/.libs/libgstimagefreeze.so</filename>
  <basename>libgstimagefreeze.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>imagefreeze</name>
      <longname>Still frame stream generator</longname>
      <class>Filter/Video</class>
      <description>Generates a still frame stream from an image</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>interleave</name>
  <description>Audio interleaver/deinterleaver</description>
  <filename>../../gst/interleave/.libs/libgstinterleave.so</filename>
  <basename>libgstinterleave.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>deinterleave</name>
      <longname>Audio deinterleaver</longname>
      <class>Filter/Converter/Audio</class>
      <description>Splits one interleaved multichannel audio stream into many mono audio streams</description>
      <author>Andy Wingo &lt;wingo at pobox.com&gt;, Iain &lt;iain@prettypeople.org&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, U8, S16LE, S16BE, U16LE, U16BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S32LE, S32BE, U32LE, U32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, F32LE, F32BE, F64LE, F64BE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>audio/x-raw, format=(string){ S8, U8, S16LE, S16BE, U16LE, U16BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S32LE, S32BE, U32LE, U32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, F32LE, F32BE, F64LE, F64BE }, rate=(int)[ 1, 2147483647 ], channels=(int)1, layout=(string){ non-interleaved, interleaved }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>interleave</name>
      <longname>Audio interleaver</longname>
      <class>Filter/Converter/Audio</class>
      <description>Folds many mono channels into one interleaved audio stream</description>
      <author>Andy Wingo &lt;wingo at pobox.com&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-raw, rate=(int)[ 1, 2147483647 ], channels=(int)1, format=(string){ S8, U8, S16LE, S16BE, U16LE, U16BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S32LE, S32BE, U32LE, U32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, F32LE, F32BE, F64LE, F64BE }, layout=(string){ non-interleaved, interleaved }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], format=(string){ S8, U8, S16LE, S16BE, U16LE, U16BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S32LE, S32BE, U32LE, U32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, F32LE, F32BE, F64LE, F64BE }, layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>isomp4</name>
  <description>ISO base media file format support (mp4, 3gpp, qt, mj2)</description>
  <filename>../../gst/isomp4/.libs/libgstisomp4.so</filename>
  <basename>libgstisomp4.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>3gppmux</name>
      <longname>3GPP Muxer</longname>
      <class>Codec/Muxer</class>
      <description>Multiplex audio and video into a 3GPP file</description>
      <author>Thiago Sousa Santos &lt;thiagoss@embedded.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/AMR, rate=(int)8000, channels=(int)[ 1, 2 ]; audio/AMR-WB, rate=(int)16000, channels=(int)[ 1, 2 ]; audio/mpeg, mpegversion=(int)1, layer=(int)3, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, channels=(int)[ 1, 8 ], rate=(int)[ 1, 2147483647 ]; audio/x-ac3, channels=(int)[ 1, 6 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>text/x-raw, format=(string)utf8</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-h263, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-divx, divxversion=(int)5, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h264, stream-format=(string)avc, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/quicktime, variant=(string)3gpp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>ismlmux</name>
      <longname>ISML Muxer</longname>
      <class>Codec/Muxer</class>
      <description>Multiplex audio and video into a ISML file</description>
      <author>Thiago Sousa Santos &lt;thiagoss@embedded.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/mpeg, mpegversion=(int)1, layer=(int)3, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, channels=(int)[ 1, 8 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-divx, divxversion=(int)5, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h264, stream-format=(string)avc, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/quicktime, variant=(string)iso-fragmented</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>mj2mux</name>
      <longname>MJ2 Muxer</longname>
      <class>Codec/Muxer</class>
      <description>Multiplex audio and video into a MJ2 file</description>
      <author>Thiago Sousa Santos &lt;thiagoss@embedded.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-raw, format=(string){ S16LE, S16BE, S8, U8 }, layout=(string)interleaved, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>image/x-j2c, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; image/x-jpc, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mj2</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>mp4mux</name>
      <longname>MP4 Muxer</longname>
      <class>Codec/Muxer</class>
      <description>Multiplex audio and video into a MP4 file</description>
      <author>Thiago Sousa Santos &lt;thiagoss@embedded.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, channels=(int)[ 1, 8 ], rate=(int)[ 1, 2147483647 ]; audio/x-ac3, channels=(int)[ 1, 6 ], rate=(int)[ 1, 2147483647 ]; audio/x-alac, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/x-opus, channel-mapping-family=(int)[ 0, 255 ], channels=(int)[ 1, 8 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>text/x-raw, format=(string)utf8</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-divx, divxversion=(int)5, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h264, stream-format=(string)avc, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-mp4-part, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/quicktime, variant=(string)iso</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>qtdemux</name>
      <longname>QuickTime demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>Demultiplex a QuickTime file into audio and video streams</description>
      <author>David Schleef &lt;ds@schleef.org&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/quicktime; video/mj2; audio/x-m4a; application/x-3gp</details>
        </caps>
        <caps>
          <name>audio_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>qtmoovrecover</name>
      <longname>QT Moov Recover</longname>
      <class>Util</class>
      <description>Recovers unfinished qtmux files</description>
      <author>Thiago Santos &lt;thiago.sousa.santos@collabora.co.uk&gt;</author>
      <pads>
      </pads>
    </element>
    <element>
      <name>qtmux</name>
      <longname>QuickTime Muxer</longname>
      <class>Codec/Muxer</class>
      <description>Multiplex audio and video into a QuickTime file</description>
      <author>Thiago Sousa Santos &lt;thiagoss@embedded.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-raw, format=(string){ S32LE, S32BE, S24LE, S24BE, S16LE, S16BE, S8, U8 }, layout=(string)interleaved, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int)1, layer=(int)3, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw, channels=(int)[ 1, 8 ], rate=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, block_align=(int)[ 64, 8096 ], channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/x-alaw, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/x-mulaw, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]; audio/AMR, rate=(int)8000, channels=(int)[ 1, 2 ]; audio/AMR-WB, rate=(int)16000, channels=(int)[ 1, 2 ]; audio/x-alac, channels=(int)[ 1, 2 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>text/x-raw, format=(string)utf8</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-raw, format=(string){ RGB, UYVY, v210 }, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-divx, divxversion=(int)5, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-prores, variant=(string){ standard, lt, hq, proxy }, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h263, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h264, stream-format=(string)avc, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-svq, svqversion=(int)3, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-dv, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; image/jpeg, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-vp8, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-dirac, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-qt-part, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/quicktime, variant=(string)apple; video/quicktime</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpxqtdepay</name>
      <longname>RTP packet depayloader</longname>
      <class>Codec/Depayloader/Network</class>
      <description>Extracts Quicktime audio/video from RTP packets</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, payload=(int)[ 96, 127 ], media=(string){ audio, video }, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string){ X-QT, X-QUICKTIME }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>jack</name>
  <description>JACK audio elements</description>
  <filename>../../ext/jack/.libs/libgstjack.so</filename>
  <basename>libgstjack.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>jackaudiosink</name>
      <longname>Audio Sink (Jack)</longname>
      <class>Sink/Audio</class>
      <description>Output audio to a JACK server</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>jackaudiosrc</name>
      <longname>Audio Source (Jack)</longname>
      <class>Source/Audio</class>
      <description>Captures audio from a JACK server</description>
      <author>Tristan Matthews &lt;tristan@sat.qc.ca&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>jpeg</name>
  <description>JPeg plugin library</description>
  <filename>../../ext/jpeg/.libs/libgstjpeg.so</filename>
  <basename>libgstjpeg.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>jpegdec</name>
      <longname>JPEG image decoder</longname>
      <class>Codec/Decoder/Image</class>
      <description>Decode images from JPEG format</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/jpeg</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, RGB, BGR, RGBx, xRGB, BGRx, xBGR, GRAY8 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>jpegenc</name>
      <longname>JPEG image encoder</longname>
      <class>Codec/Encoder/Image</class>
      <description>Encode images in JPEG format</description>
      <author>Wim Taymans &lt;wim.taymans@tvd.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, YV12, YUY2, UYVY, Y41B, Y42B, YVYU, Y444, NV21, NV12, RGB, BGR, RGBx, xRGB, BGRx, xBGR, GRAY8 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/jpeg, width=(int)[ 16, 65535 ], height=(int)[ 16, 65535 ], framerate=(fraction)[ 0/1, 2147483647/1 ], sof-marker=(int){ 0, 1, 2, 9 }</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>level</name>
  <description>Audio level plugin</description>
  <filename>../../gst/level/.libs/libgstlevel.so</filename>
  <basename>libgstlevel.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>level</name>
      <longname>Level</longname>
      <class>Filter/Analyzer/Audio</class>
      <description>RMS/Peak/Decaying Peak Level messager for audio/raw</description>
      <author>Thomas Vander Stichele &lt;thomas at apestaart dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S32LE, F32LE, F64LE }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S8, S16LE, S32LE, F32LE, F64LE }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>matroska</name>
  <description>Matroska and WebM stream handling</description>
  <filename>../../gst/matroska/.libs/libgstmatroska.so</filename>
  <basename>libgstmatroska.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>matroskademux</name>
      <longname>Matroska demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>Demuxes Matroska/WebM streams into video/audio/subtitles</description>
      <author>GStreamer maintainers &lt;gstreamer-devel@lists.freedesktop.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-matroska; video/x-matroska; video/x-matroska-3d; audio/webm; video/webm</details>
        </caps>
        <caps>
          <name>audio_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>text/x-raw, format=(string)pango-markup; application/x-ssa; application/x-ass; application/x-usf; subpicture/x-dvd; subpicture/x-pgs; subtitle/x-kate; application/x-subtitle-unknown</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>matroskamux</name>
      <longname>Matroska muxer</longname>
      <class>Codec/Muxer</class>
      <description>Muxes video/audio/subtitle streams into a matroska stream</description>
      <author>GStreamer maintainers &lt;gstreamer-devel@lists.freedesktop.org&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ], channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/mpeg, mpegversion=(int){ 2, 4 }, stream-format=(string)raw, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-ac3, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-eac3, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-dts, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-vorbis, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-flac, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-opus; audio/x-speex, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-raw, format=(string){ U8, S16BE, S16LE, S24BE, S24LE, S32BE, S32LE, F32LE, F64LE }, layout=(string)interleaved, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-tta, width=(int){ 8, 16, 24 }, channels=(int){ 1, 2 }, rate=(int)[ 8000, 96000 ]; audio/x-pn-realaudio, raversion=(int){ 1, 2, 8 }, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)[ 1, 3 ], block_align=(int)[ 0, 65535 ], bitrate=(int)[ 0, 524288 ], channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-alaw, channels=(int){ 1, 2 }, rate=(int)[ 8000, 192000 ]; audio/x-mulaw, channels=(int){ 1, 2 }, rate=(int)[ 8000, 192000 ]; audio/x-adpcm, layout=(string)dvi, block_align=(int)[ 64, 8192 ], channels=(int){ 1, 2 }, rate=(int)[ 8000, 96000 ]; audio/x-adpcm, layout=(string)g726, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>subtitle/x-kate; text/x-raw, format=(string)utf8; application/x-ssa; application/x-ass; application/x-usf; subpicture/x-dvd; application/x-subtitle-unknown</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/mpeg, mpegversion=(int){ 1, 2, 4 }, systemstream=(boolean)false, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h264, stream-format=(string)avc, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h265, stream-format=(string)hvc1, alignment=(string)au, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-divx, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-huffyuv, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-dv, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-h263, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-msmpeg, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; image/jpeg, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-theora; video/x-dirac, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-pn-realvideo, rmversion=(int)[ 1, 4 ], width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-vp8, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-vp9, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-raw, format=(string){ YUY2, I420, YV12, UYVY, AYUV, GRAY8, BGR, RGB }, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-prores, width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]; video/x-wmv, wmvversion=(int)[ 1, 3 ], width=(int)[ 16, 2147483647 ], height=(int)[ 16, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-matroska; video/x-matroska-3d; audio/x-matroska</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>matroskaparse</name>
      <longname>Matroska parser</longname>
      <class>Codec/Parser</class>
      <description>Parses Matroska/WebM streams into video/audio/subtitles</description>
      <author>GStreamer maintainers &lt;gstreamer-devel@lists.freedesktop.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-matroska; video/x-matroska; video/x-matroska-3d; audio/webm; video/webm</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-matroska; video/x-matroska; video/x-matroska-3d; audio/webm; video/webm</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>webmmux</name>
      <longname>WebM muxer</longname>
      <class>Codec/Muxer</class>
      <description>Muxes video and audio streams into a WebM stream</description>
      <author>GStreamer maintainers &lt;gstreamer-devel@lists.freedesktop.org&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>audio/x-vorbis, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]; audio/x-opus, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>subtitle/x-kate; text/x-raw, format=(string)utf8; application/x-ssa; application/x-ass; application/x-usf; subpicture/x-dvd; application/x-subtitle-unknown</details>
        </caps>
        <caps>
          <name>video_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-vp8, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-vp9, width=(int)[ 16, 4096 ], height=(int)[ 16, 4096 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/webm; audio/webm</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>monoscope</name>
  <description>Monoscope visualization</description>
  <filename>../../gst/monoscope/.libs/libgstmonoscope.so</filename>
  <basename>libgstmonoscope.so</basename>
  <version>1.1.3</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>monoscope</name>
      <longname>Monoscope</longname>
      <class>Visualization</class>
      <description>Displays a highly stabilised waveform of audio input</description>
      <author>Richard Boulton &lt;richard@tartarus.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, rate=(int)[ 8000, 96000 ], channels=(int)1, layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)BGRx, width=(int)256, height=(int)128, framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>mulaw</name>
  <description>MuLaw audio conversion routines</description>
  <filename>../../gst/law/.libs/libgstmulaw.so</filename>
  <basename>libgstmulaw.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>mulawdec</name>
      <longname>Mu Law audio decoder</longname>
      <class>Codec/Decoder/Audio</class>
      <description>Convert 8bit mu law to 16bit PCM</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>mulawenc</name>
      <longname>Mu Law audio encoder</longname>
      <class>Codec/Encoder/Audio</class>
      <description>Convert 16bit PCM to 8bit mu law</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>multifile</name>
  <description>Reads/Writes buffers from/to sequentially named files</description>
  <filename>../../gst/multifile/.libs/libgstmultifile.so</filename>
  <basename>libgstmultifile.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>multifilesink</name>
      <longname>Multi-File Sink</longname>
      <class>Sink/File</class>
      <description>Write buffers to a sequentially named set of files</description>
      <author>David Schleef &lt;ds@schleef.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>multifilesrc</name>
      <longname>Multi-File Source</longname>
      <class>Source/File</class>
      <description>Read a sequentially named set of files into buffers</description>
      <author>David Schleef &lt;ds@schleef.org&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>splitfilesrc</name>
      <longname>Split-File Source</longname>
      <class>Source/File</class>
      <description>Read a sequentially named set of files as if it was one large file</description>
      <author>Tim-Philipp Müller &lt;tim.muller@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>splitmuxsink</name>
      <longname>Split Muxing Bin</longname>
      <class>Generic/Bin/Muxer</class>
      <description>Convenience bin that muxes incoming streams into multiple time/size limited files</description>
      <author>Jan Schmidt &lt;jan@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>video</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>splitmuxsrc</name>
      <longname>Split File Demuxing Bin</longname>
      <class>Generic/Bin/Demuxer</class>
      <description>Source that reads a set of files created by splitmuxsink</description>
      <author>Jan Schmidt &lt;jan@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>audio_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>subtitle_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>video</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>multipart</name>
  <description>multipart stream manipulation</description>
  <filename>../../gst/multipart/.libs/libgstmultipart.so</filename>
  <basename>libgstmultipart.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>multipartdemux</name>
      <longname>Multipart demuxer</longname>
      <class>Codec/Demuxer</class>
      <description>demux multipart streams</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;, Sjoerd Simons &lt;sjoerd@luon.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>multipart/x-mixed-replace</details>
        </caps>
        <caps>
          <name>src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>multipartmux</name>
      <longname>Multipart muxer</longname>
      <class>Codec/Muxer</class>
      <description>mux multipart streams</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>multipart/x-mixed-replace</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>navigationtest</name>
  <description>Template for a video filter</description>
  <filename>../../gst/debugutils/.libs/libgstnavigationtest.so</filename>
  <basename>libgstnavigationtest.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>navigationtest</name>
      <longname>Video navigation test</longname>
      <class>Filter/Effect/Video</class>
      <description>Handle navigation events showing a black square following mouse pointer</description>
      <author>David Schleef &lt;ds@schleef.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>oss4</name>
  <description>Open Sound System (OSS) version 4 support for GStreamer</description>
  <filename>../../sys/oss4/.libs/libgstoss4audio.so</filename>
  <basename>libgstoss4audio.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>oss4sink</name>
      <longname>OSS v4 Audio Sink</longname>
      <class>Sink/Audio</class>
      <description>Output to a sound card via OSS version 4</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-alaw, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]; audio/x-mulaw, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]; audio/x-raw, format=(string){ S32LE, S32BE, S24_32LE, S24_32BE, S24LE, S16LE, S16BE, U16LE, U16BE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>oss4src</name>
      <longname>OSS v4 Audio Source</longname>
      <class>Source/Audio</class>
      <description>Capture from a sound card via OSS version 4</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-alaw, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]; audio/x-mulaw, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]; audio/x-raw, format=(string){ S32LE, S32BE, S24_32LE, S24_32BE, S24LE, S16LE, S16BE, U16LE, U16BE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 192000 ], channels=(int)[ 1, 4096 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>ossaudio</name>
  <description>OSS (Open Sound System) support for GStreamer</description>
  <filename>../../sys/oss/.libs/libgstossaudio.so</filename>
  <basename>libgstossaudio.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>osssink</name>
      <longname>Audio Sink (OSS)</longname>
      <class>Sink/Audio</class>
      <description>Output to a sound card via OSS</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, U16LE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)1; audio/x-raw, format=(string){ S16LE, U16LE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>osssrc</name>
      <longname>Audio Source (OSS)</longname>
      <class>Source/Audio</class>
      <description>Capture from a sound card via OSS</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, U16LE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)1; audio/x-raw, format=(string){ S16LE, U16LE, S8, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>osxaudio</name>
  <description>OSX (Mac OS X) audio support for GStreamer</description>
  <filename>../../sys/osxaudio/.libs/libgstosxaudio.so</filename>
  <basename>libgstosxaudio.so</basename>
  <version>0.10.5.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins CVS/prerelease</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>osxaudiosink</name>
      <longname>Audio Sink (OSX)</longname>
      <class>Sink/Audio</class>
      <description>Output to a sound card in OS X</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
    </element>
    <element>
      <name>osxaudiosrc</name>
      <longname>Audio Source (OSX)</longname>
      <class>Source/Audio</class>
      <description>Input from a sound card in OS X</description>
      <author>Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
    </element>
  </elements>
</plugin>
<plugin>
  <name>osxvideo</name>
  <description>OSX native video output plugin</description>
  <filename>../../ext/osxvideo/.libs/libgstosxvideo.so</filename>
  <basename>libgstosxvideo.so</basename>
  <version>0.10.4</version>
  <license>LGPL</license>
  <source>gst-plugins-bad</source>
  <package>Gstreamer</package>
  <origin>http://gstreamer.freedesktop.org</origin>
  <elements>
    <element>
      <name>osxvideosink</name>
      <longname>OSX Video sink</longname>
      <class>Sink/Video</class>
      <description>OSX native videosink</description>
      <author>Zaheer Abbas Merali &lt;zaheerabas at merali dot org&gt;</author>
    </element>
  </elements>
</plugin>
<plugin>
  <name>png</name>
  <description>PNG plugin library</description>
  <filename>../../ext/libpng/.libs/libgstpng.so</filename>
  <basename>libgstpng.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>pngdec</name>
      <longname>PNG image decoder</longname>
      <class>Codec/Decoder/Image</class>
      <description>Decode a png video frame to a raw image</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/png</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBA, RGB, ARGB64, GRAY8, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>pngenc</name>
      <longname>PNG image encoder</longname>
      <class>Codec/Encoder/Image</class>
      <description>Encode a video frame to a .png image</description>
      <author>Jeremy SIMON &lt;jsimon13@yahoo.fr&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBA, RGB, GRAY8, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/png, width=(int)[ 16, 1000000 ], height=(int)[ 16, 1000000 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>pulseaudio</name>
  <description>PulseAudio plugin library</description>
  <filename>../../ext/pulse/.libs/libgstpulse.so</filename>
  <basename>libgstpulse.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>pulsesink</name>
      <longname>PulseAudio Audio Sink</longname>
      <class>Sink/Audio</class>
      <description>Plays audio to a PulseAudio server</description>
      <author>Lennart Poettering</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, S16BE, F32LE, F32BE, S32LE, S32BE, S24LE, S24BE, S24_32LE, S24_32BE, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]; audio/x-alaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]; audio/x-mulaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]; audio/x-ac3, framed=(boolean)true; audio/x-eac3, framed=(boolean)true; audio/x-dts, framed=(boolean)true, block-size=(int){ 512, 1024, 2048 }; audio/mpeg, mpegversion=(int)1, mpegaudioversion=(int)[ 1, 2 ], parsed=(boolean)true; audio/mpeg, mpegversion=(int){ 2, 4 }, framed=(boolean)true, stream-format=(string)adts</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>pulsesrc</name>
      <longname>PulseAudio Audio Source</longname>
      <class>Source/Audio</class>
      <description>Captures audio from a PulseAudio server</description>
      <author>Lennart Poettering</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, S16BE, F32LE, F32BE, S32LE, S32BE, S24LE, S24BE, S24_32LE, S24_32BE, U8 }, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]; audio/x-alaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]; audio/x-mulaw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 32 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>replaygain</name>
  <description>ReplayGain volume normalization</description>
  <filename>../../gst/replaygain/.libs/libgstreplaygain.so</filename>
  <basename>libgstreplaygain.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>rganalysis</name>
      <longname>ReplayGain analysis</longname>
      <class>Filter/Analyzer/Audio</class>
      <description>Perform the ReplayGain analysis</description>
      <author>René Stadler &lt;mail@renestadler.de&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string)interleaved, channels=(int)1, rate=(int){ 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000 }; audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string)interleaved, channels=(int)2, channel-mask=(bitmask)0x0000000000000003, rate=(int){ 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string)interleaved, channels=(int)1, rate=(int){ 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000 }; audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string)interleaved, channels=(int)2, channel-mask=(bitmask)0x0000000000000003, rate=(int){ 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rglimiter</name>
      <longname>ReplayGain limiter</longname>
      <class>Filter/Effect/Audio</class>
      <description>Apply signal compression to raw audio data</description>
      <author>René Stadler &lt;mail@renestadler.de&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, layout=(string){ interleaved, non-interleaved }, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)F32LE, layout=(string){ interleaved, non-interleaved }, channels=(int)[ 1, 2147483647 ], rate=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rgvolume</name>
      <longname>ReplayGain volume</longname>
      <class>Filter/Effect/Audio</class>
      <description>Apply ReplayGain volume adjustment</description>
      <author>René Stadler &lt;mail@renestadler.de&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string){ interleaved, non-interleaved }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ F32LE, S16LE }, layout=(string){ interleaved, non-interleaved }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>rtpmanager</name>
  <description>RTP session management plugin library</description>
  <filename>../../gst/rtpmanager/.libs/libgstrtpmanager.so</filename>
  <basename>libgstrtpmanager.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>rtpbin</name>
      <longname>RTP Bin</longname>
      <class>Filter/Network/RTP</class>
      <description>Real-Time Transport Protocol bin</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>recv_rtcp_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtcp; application/x-srtcp</details>
        </caps>
        <caps>
          <name>recv_rtp_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp; application/x-srtp</details>
        </caps>
        <caps>
          <name>send_rtp_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>recv_rtp_src_%u_%u_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>send_rtp_src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp; application/x-srtp</details>
        </caps>
        <caps>
          <name>send_rtcp_src_%u</name>
          <direction>source</direction>
          <presence>request</presence>
          <details>application/x-rtcp; application/x-srtcp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdtmfmux</name>
      <longname>RTP muxer</longname>
      <class>Codec/Muxer</class>
      <description>mixes RTP DTMF streams into other RTP streams</description>
      <author>Zeeshan Ali &lt;first.last@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>priority_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpjitterbuffer</name>
      <longname>RTP packet jitter-buffer</longname>
      <class>Filter/Network/RTP</class>
      <description>A buffer that deals with network jitter and other transmission faults</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>sink_rtcp</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmux</name>
      <longname>RTP muxer</longname>
      <class>Codec/Muxer</class>
      <description>multiplex N rtp streams into one</description>
      <author>Zeeshan Ali &lt;first.last@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpptdemux</name>
      <longname>RTP Demux</longname>
      <class>Demux/Network/RTP</class>
      <description>Parses codec streams transmitted in the same RTP session</description>
      <author>Kai Vehmanen &lt;kai.vehmanen@nokia.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp, payload=(int)[ 0, 255 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtprtxqueue</name>
      <longname>RTP Retransmission Queue</longname>
      <class>Codec</class>
      <description>Keep RTP packets in a queue for retransmission</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtprtxreceive</name>
      <longname>RTP Retransmission receiver</longname>
      <class>Codec</class>
      <description>Receive retransmitted RTP packets according to RFC4588</description>
      <author>Julien Isorce &lt;julien.isorce@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtprtxsend</name>
      <longname>RTP Retransmission Sender</longname>
      <class>Codec</class>
      <description>Retransmit RTP packets when needed, according to RFC4588</description>
      <author>Julien Isorce &lt;julien.isorce@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsession</name>
      <longname>RTP Session</longname>
      <class>Filter/Network/RTP</class>
      <description>Implement an RTP session</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>recv_rtcp_sink</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>recv_rtp_sink</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>send_rtp_sink</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>recv_rtp_src</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>send_rtp_src</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>sync_src</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>send_rtcp_src</name>
          <direction>source</direction>
          <presence>request</presence>
          <details>application/x-rtcp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpssrcdemux</name>
      <longname>RTP SSRC Demux</longname>
      <class>Demux/Network/RTP</class>
      <description>Splits RTP streams based on the SSRC</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>rtcp_sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>rtcp_src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>src_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>rtp</name>
  <description>Real-time protocol plugins</description>
  <filename>../../gst/rtp/.libs/libgstrtp.so</filename>
  <basename>libgstrtp.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>asteriskh263</name>
      <longname>RTP Asterisk H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263 video from RTP and encodes in Asterisk H263 format</description>
      <author>Neil Stratford &lt;neils@vipadia.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-asteriskh263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL16depay</name>
      <longname>RTP audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts raw audio from RTP packets</description>
      <author>Zeeshan Ali &lt;zak147@yahoo.com&gt;,Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16; application/x-rtp, media=(string)audio, payload=(int){ 10, 11 }, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL16pay</name>
      <longname>RTP audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Raw audio into RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16, channels=(int)[ 1, 2147483647 ]; application/x-rtp, media=(string)audio, encoding-name=(string)L16, payload=(int)10, clock-rate=(int)44100; application/x-rtp, media=(string)audio, encoding-name=(string)L16, payload=(int)11, clock-rate=(int)44100</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL24depay</name>
      <longname>RTP audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts raw 24-bit audio from RTP packets</description>
      <author>Zeeshan Ali &lt;zak147@yahoo.com&gt;,Wim Taymans &lt;wim.taymans@gmail.com&gt;,David Holroyd &lt;dave@badgers-in-foil.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L24</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S24BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL24pay</name>
      <longname>RTP audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Raw 24-bit audio into RTP packets (RFC 3190)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;,David Holroyd &lt;dave@badgers-in-foil.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S24BE, layout=(string)interleaved, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L24, channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpac3depay</name>
      <longname>RTP AC3 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts AC3 audio from RTP packets (RFC 4184)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int){ 32000, 44100, 48000 }, encoding-name=(string)AC3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/ac3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpac3pay</name>
      <longname>RTP AC3 audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload AC3 audio as RTP packets (RFC 4184)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/ac3; audio/x-ac3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 32000, 44100, 48000 }, encoding-name=(string)AC3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpamrdepay</name>
      <longname>RTP AMR depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts AMR or AMR-WB audio from RTP packets (RFC 3267)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)AMR, octet-align=(string)1; application/x-rtp, media=(string)audio, clock-rate=(int)16000, encoding-name=(string)AMR-WB, octet-align=(string)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpamrpay</name>
      <longname>RTP AMR payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode AMR or AMR-WB audio into RTP packets (RFC 3267)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)AMR, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)AMR-WB, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpbvdepay</name>
      <longname>RTP BroadcomVoice depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts BroadcomVoice audio from RTP packets (RFC 4298)</description>
      <author>Wim Taymans &lt;wim.taymans@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)BV16; application/x-rtp, media=(string)audio, clock-rate=(int)16000, encoding-name=(string)BV32</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-bv, mode=(int){ 16, 32 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpbvpay</name>
      <longname>RTP BV Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize BroadcomVoice audio streams into RTP packets (RFC 4298)</description>
      <author>Wim Taymans &lt;wim.taymans@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-bv, mode=(int){ 16, 32 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)BV16; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)BV32</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpceltdepay</name>
      <longname>RTP CELT depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts CELT audio from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 32000, 48000 ], encoding-name=(string)CELT</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-celt</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpceltpay</name>
      <longname>RTP CELT payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes CELT audio into a RTP packet</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-celt, rate=(int)[ 32000, 64000 ], channels=(int)[ 1, 2 ], frame-size=(int)[ 64, 512 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 32000, 48000 ], encoding-name=(string)CELT</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdvdepay</name>
      <longname>RTP DV Depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Depayloads DV from RTP packets (RFC 3189)</description>
      <author>Marcel Moreaux &lt;marcelm@spacelabs.nl&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio }, encoding-name=(string)DV, clock-rate=(int)90000, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-dv</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdvpay</name>
      <longname>RTP DV Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payloads DV into RTP packets (RFC 3189)</description>
      <author>Marcel Moreaux &lt;marcelm@spacelabs.nl&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-dv</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio }, payload=(int)[ 96, 127 ], encoding-name=(string)DV, clock-rate=(int)90000, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg722depay</name>
      <longname>RTP audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G722 audio from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)G722; application/x-rtp, media=(string)audio, payload=(int)9, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G722, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg722pay</name>
      <longname>RTP audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Raw audio into RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G722, rate=(int)16000, channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, encoding-name=(string)G722, payload=(int)9, clock-rate=(int)8000; application/x-rtp, media=(string)audio, encoding-name=(string)G722, payload=(int)[ 96, 127 ], clock-rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg723depay</name>
      <longname>RTP G.723 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.723 audio from RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)G723; application/x-rtp, media=(string)audio, payload=(int)4, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G723, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg723pay</name>
      <longname>RTP G.723 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize G.723 audio into RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G723, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)4, clock-rate=(int)8000, encoding-name=(string)G723; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G723</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg726depay</name>
      <longname>RTP G.726 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.726 audio from RTP packets</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, encoding-name=(string){ G726, G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40 }, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-adpcm, channels=(int)1, rate=(int)8000, bitrate=(int){ 16000, 24000, 32000, 40000 }, block_align=(int){ 2, 3, 4, 5 }, layout=(string)g726</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg726pay</name>
      <longname>RTP G.726 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes G.726 audio into a RTP packet</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-adpcm, channels=(int)1, rate=(int)8000, bitrate=(int){ 16000, 24000, 32000, 40000 }, layout=(string)g726</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string){ G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg729depay</name>
      <longname>RTP G.729 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.729 audio from RTP packets (RFC 3551)</description>
      <author>Laurent Glayal &lt;spglegle@yahoo.fr&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)G729; application/x-rtp, media=(string)audio, payload=(int)18, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G729, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg729pay</name>
      <longname>RTP G.729 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize G.729 audio into RTP packets</description>
      <author>Olivier Crete &lt;olivier.crete@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G729, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)18, clock-rate=(int)8000, encoding-name=(string)G729; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G729</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgsmdepay</name>
      <longname>RTP GSM depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts GSM audio from RTP packets</description>
      <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-gsm, rate=(int)8000, channels=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgsmpay</name>
      <longname>RTP GSM payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes GSM audio into a RTP packet</description>
      <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-gsm, rate=(int)8000, channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)GSM</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgstdepay</name>
      <longname>GStreamer depayloader</longname>
      <class>Codec/Depayloader/Network</class>
      <description>Extracts GStreamer buffers from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, clock-rate=(int)90000, encoding-name=(string)X-GST</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgstpay</name>
      <longname>RTP GStreamer payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload GStreamer buffers as RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)X-GST</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph261depay</name>
      <longname>RTP H261 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H261 video from RTP packets (RFC 4587)</description>
      <author>Stian Selnes &lt;stian@pexip.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)31, clock-rate=(int)90000, encoding-name=(string)H261; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H261</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h261</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph261pay</name>
      <longname>RTP H261 packet payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes H261 video in RTP packets (RFC 4587)</description>
      <author>Stian Selnes &lt;stian@pexip.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h261</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)31, clock-rate=(int)90000, encoding-name=(string)H261; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H261</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263depay</name>
      <longname>RTP H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263 video from RTP packets (RFC 2190)</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;, Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000; application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H263</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu, h263version=(string)h263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263pay</name>
      <longname>RTP H263 packet payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes H263 video in RTP packets (RFC 2190)</description>
      <author>Neil Stratford &lt;neils@vipadia.com&gt;Dejan Sakelsak &lt;dejan.sakelsak@marand.si&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu, h263version=(string)h263</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263pdepay</name>
      <longname>RTP H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263/+/++ video from RTP packets (RFC 4629)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)H263-2000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263ppay</name>
      <longname>RTP H263 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes H263/+/++ video in RTP packets (RFC 4629)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-2000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph264depay</name>
      <longname>RTP H264 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H264 video from RTP packets (RFC 3984)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h264, stream-format=(string)avc, alignment=(string)au; video/x-h264, stream-format=(string)byte-stream, alignment=(string){ nal, au }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph264pay</name>
      <longname>RTP H264 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode H264 video into RTP packets (RFC 3984)</description>
      <author>Laurent Glayal &lt;spglegle@yahoo.fr&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h264, stream-format=(string)avc, alignment=(string)au; video/x-h264, stream-format=(string)byte-stream, alignment=(string){ nal, au }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H264</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph265depay</name>
      <longname>RTP H265 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H265 video from RTP packets (RFC 7798)</description>
      <author>Jurgen Slowack &lt;jurgenslowack@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H265</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h265, stream-format=(string)byte-stream, alignment=(string){ nal, au }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph265pay</name>
      <longname>RTP H265 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode H265 video into RTP packets (RFC 7798)</description>
      <author>Jurgen Slowack &lt;jurgenslowack@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h265, stream-format=(string)hvc1, alignment=(string)au; video/x-h265, stream-format=(string)byte-stream, alignment=(string){ nal, au }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H265</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpilbcdepay</name>
      <longname>RTP iLBC depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts iLBC audio from RTP packets (RFC 3952)</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)ILBC</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-iLBC, mode=(int){ 20, 30 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpilbcpay</name>
      <longname>RTP iLBC Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize iLBC audio streams into RTP packets</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-iLBC, mode=(int){ 20, 30 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)ILBC, mode=(string){ 20, 30 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpj2kdepay</name>
      <longname>RTP JPEG 2000 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts JPEG 2000 video from RTP packets (RFC 5371)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, sampling=(string){ RGB, BGR, RGBA, BGRA, YCbCrA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1, GRAYSCALE }, encoding-name=(string)JPEG2000; application/x-rtp, media=(string)video, clock-rate=(int)90000, colorspace=(string){ sRGB, sYUV, GRAY }, encoding-name=(string)JPEG2000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/x-jpc, colorspace=(string){ sRGB, sYUV, GRAY }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpj2kpay</name>
      <longname>RTP JPEG 2000 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes JPEG 2000 pictures into RTP packets (RFC 5371)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/x-jpc, sampling=(string){ RGB, BGR, RGBA, BGRA, YCbCrA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1, GRAYSCALE }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, sampling=(string){ RGB, BGR, RGBA, BGRA, YCbCrA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1, GRAYSCALE }, encoding-name=(string)JPEG2000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpjpegdepay</name>
      <longname>RTP JPEG depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts JPEG video from RTP packets (RFC 2435)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)JPEG; application/x-rtp, media=(string)video, payload=(int)26, clock-rate=(int)90000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/jpeg</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpjpegpay</name>
      <longname>RTP JPEG payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes JPEG pictures into RTP packets (RFC 2435)</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/jpeg; video/x-jpeg</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)26, clock-rate=(int)90000, encoding-name=(string)JPEG, width=(int)[ 1, 65536 ], height=(int)[ 1, 65536 ]; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)JPEG, width=(int)[ 1, 65536 ], height=(int)[ 1, 65536 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpklvdepay</name>
      <longname>RTP KLV Depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts KLV (SMPTE ST 336) metadata from RTP packets</description>
      <author>Tim-Philipp Müller &lt;tim@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)SMPTE336M</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>meta/x-klv, parsed=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpklvpay</name>
      <longname>RTP KLV Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payloads KLV (SMPTE ST 336) metadata as RTP packets</description>
      <author>Tim-Philipp Müller &lt;tim@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>meta/x-klv, parsed=(boolean)true</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)SMPTE336M</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp1sdepay</name>
      <longname>RTP MPEG1 System Stream depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG1 System Streams from RTP packets (RFC 3555)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)other, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP1S; application/x-rtp, media=(string)video, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP1S</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, systemstream=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp2tdepay</name>
      <longname>RTP MPEG Transport Stream depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG2 TS from RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;, Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string){ MP2T, MP2T-ES }; application/x-rtp, media=(string)video, payload=(int)33, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp2tpay</name>
      <longname>RTP MPEG2 Transport Stream payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes MPEG2 TS into RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)33, clock-rate=(int)90000, encoding-name=(string)MP2T; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MP2T</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4adepay</name>
      <longname>RTP MPEG4 audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 audio from RTP packets (RFC 3016)</description>
      <author>Nokia Corporation (contact &lt;stefan.kost@nokia.com&gt;), Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4A-LATM</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)4, framed=(boolean){ false, true }, stream-format=(string)raw</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4apay</name>
      <longname>RTP MPEG4 audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG4 audio as RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4A-LATM</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4gdepay</name>
      <longname>RTP MPEG4 ES depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 elementary streams from RTP packets (RFC 3640)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio, application }, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4gpay</name>
      <longname>RTP MPEG4 ES payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG4 elementary streams as RTP packets (RFC 3640)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4vdepay</name>
      <longname>RTP MPEG4 video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 video from RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4vpay</name>
      <longname>RTP MPEG4 Video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG-4 video as RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; video/x-divx</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpadepay</name>
      <longname>RTP MPEG audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG audio from RTP packets (RFC 2038)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000; application/x-rtp, media=(string)audio, encoding-name=(string)MPA, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpapay</name>
      <longname>RTP MPEG audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG audio as RTP packets (RFC 2038)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmparobustdepay</name>
      <longname>RTP MPEG audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG audio from RTP packets (RFC 5219)</description>
      <author>Mark Nauwelaerts &lt;mark.nauwelaerts@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)90000, encoding-name=(string)MPA-ROBUST; application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string){ X-MP3-DRAFT-00, X-MP3-DRAFT-01, X-MP3-DRAFT-02, X-MP3-DRAFT-03, X-MP3-DRAFT-04, X-MP3-DRAFT-05, X-MP3-DRAFT-06 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpvdepay</name>
      <longname>RTP MPEG video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG video from RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)MPV; application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpvpay</name>
      <longname>RTP MPEG2 ES video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes MPEG2 ES into RTP packets (RFC 2250)</description>
      <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000, encoding-name=(string)MPV; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPV</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpopusdepay</name>
      <longname>RTP Opus packet depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Opus audio from RTP packets</description>
      <author>Danilo Cesar Lemes de Paula &lt;danilo.cesar@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)48000, encoding-name=(string){ OPUS, X-GST-OPUS-DRAFT-SPITTKA-00 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-opus, channel-mapping-family=(int)0</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpopuspay</name>
      <longname>RTP Opus payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Puts Opus audio in RTP packets</description>
      <author>Danilo Cesar Lemes de Paula &lt;danilo.cesar@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-opus, channels=(int)[ 1, 2 ], channel-mapping-family=(int)0</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)48000, encoding-params=(string)2, encoding-name=(string){ OPUS, X-GST-OPUS-DRAFT-SPITTKA-00 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmadepay</name>
      <longname>RTP PCMA depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts PCMA audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000; application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMA</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-alaw, channels=(int)1, rate=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmapay</name>
      <longname>RTP PCMA payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes PCMA audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-alaw, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmudepay</name>
      <longname>RTP PCMU depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts PCMU audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)0, clock-rate=(int)8000; application/x-rtp, media=(string)audio, encoding-name=(string)PCMU, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, channels=(int)1, rate=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmupay</name>
      <longname>RTP PCMU payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes PCMU audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)0, clock-rate=(int)8000, encoding-name=(string)PCMU; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMU</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpqcelpdepay</name>
      <longname>RTP QCELP depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts QCELP (PureVoice) audio from RTP packets (RFC 2658)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)8000, encoding-name=(string)QCELP; application/x-rtp, media=(string)audio, payload=(int)12, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/qcelp, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpqdm2depay</name>
      <longname>RTP QDM2 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts QDM2 audio from RTP packets (no RFC)</description>
      <author>Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, encoding-name=(string)X-QDM</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-qdm2</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsbcdepay</name>
      <longname>RTP SBC audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts SBC audio from RTP packets</description>
      <author>Arun Raghavan &lt;arun.raghavan@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 16000, 32000, 44100, 48000 }, encoding-name=(string)SBC</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-sbc, rate=(int){ 16000, 32000, 44100, 48000 }, channels=(int)[ 1, 2 ], mode=(string){ mono, dual, stereo, joint }, blocks=(int){ 4, 8, 12, 16 }, subbands=(int){ 4, 8 }, allocation-method=(string){ snr, loudness }, bitpool=(int)[ 2, 64 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsbcpay</name>
      <longname>RTP packet payloader</longname>
      <class>Codec/Payloader/Network</class>
      <description>Payload SBC audio as RTP packets</description>
      <author>Thiago Sousa Santos &lt;thiagoss@lcc.ufcg.edu.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-sbc, rate=(int){ 16000, 32000, 44100, 48000 }, channels=(int)[ 1, 2 ], channel-mode=(string){ mono, dual, stereo, joint }, blocks=(int){ 4, 8, 12, 16 }, subbands=(int){ 4, 8 }, allocation-method=(string){ snr, loudness }, bitpool=(int)[ 2, 64 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 16000, 32000, 44100, 48000 }, encoding-name=(string)SBC</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsirendepay</name>
      <longname>RTP Siren packet depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Siren audio from RTP packets</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)16000, encoding-name=(string)SIREN</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-siren, dct-length=(int)320</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsirenpay</name>
      <longname>RTP Payloader for Siren Audio</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize Siren audio streams into RTP packets</description>
      <author>Youness Alaoui &lt;kakaroto@kakaroto.homelinux.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-siren, dct-length=(int)320</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)SIREN, bitrate=(string)16000, dct-length=(int)320</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpspeexdepay</name>
      <longname>RTP Speex depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Speex audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-speex</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpspeexpay</name>
      <longname>RTP Speex payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes Speex audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-speex, rate=(int)[ 6000, 48000 ], channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX, encoding-params=(string)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpstreamdepay</name>
      <longname>RTP Stream Depayloading</longname>
      <class>Codec/Depayloader/Network</class>
      <description>Depayloads RTP/RTCP packets for streaming protocols according to RFC4571</description>
      <author>Sebastian Dröge &lt;sebastian@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp-stream; application/x-rtcp-stream; application/x-srtp-stream; application/x-srtcp-stream</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp; application/x-rtcp; application/x-srtp; application/x-srtcp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpstreampay</name>
      <longname>RTP Stream Payloading</longname>
      <class>Codec/Payloader/Network</class>
      <description>Payloads RTP/RTCP packets for streaming protocols according to RFC4571</description>
      <author>Sebastian Dröge &lt;sebastian@centricular.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp; application/x-rtcp; application/x-srtp; application/x-srtcp</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp-stream; application/x-rtcp-stream; application/x-srtp-stream; application/x-srtcp-stream</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsv3vdepay</name>
      <longname>RTP SVQ3 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts SVQ3 video from RTP packets (no RFC)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string){ X-SV3V-ES, X-SORENSON-VIDEO, X-SORENSONVIDEO, X-SorensonVideo }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-svq, svqversion=(int)3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtptheoradepay</name>
      <longname>RTP Theora depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Theora video from RTP packets (draft-01 of RFC XXXX)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)THEORA</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-theora</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtptheorapay</name>
      <longname>RTP Theora payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Theora video into RTP packets (draft-01 RFC XXXX)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-theora</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)THEORA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvorbisdepay</name>
      <longname>RTP Vorbis depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Vorbis Audio from RTP packets (RFC 5215)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-vorbis</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvorbispay</name>
      <longname>RTP Vorbis payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Vorbis audio into RTP packets (RFC 5215)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-vorbis</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvp8depay</name>
      <longname>RTP VP8 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts VP8 video from RTP packets)</description>
      <author>Sjoerd Simons &lt;sjoerd@luon.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, clock-rate=(int)90000, media=(string)video, encoding-name=(string){ VP8, VP8-DRAFT-IETF-01 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-vp8</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvp8pay</name>
      <longname>RTP VP8 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Puts VP8 video in RTP packets</description>
      <author>Sjoerd Simons &lt;sjoerd@luon.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-vp8</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string){ VP8, VP8-DRAFT-IETF-01 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvp9depay</name>
      <longname>RTP VP9 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts VP9 video from RTP packets)</description>
      <author>Stian Selnes &lt;stian@pexip.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, clock-rate=(int)90000, media=(string)video, encoding-name=(string){ VP9, VP9-DRAFT-IETF-01 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-vp9</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvp9pay</name>
      <longname>RTP VP9 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Puts VP9 video in RTP packets)</description>
      <author>Stian Selnes &lt;stian@pexip.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-vp9</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string){ VP9, VP9-DRAFT-IETF-01 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvrawdepay</name>
      <longname>RTP Raw Video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts raw video from RTP packets (RFC 4175)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)RAW, sampling=(string){ RGB, RGBA, BGR, BGRA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1 }, depth=(string){ 8, 10, 12, 16 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvrawpay</name>
      <longname>RTP Raw Video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload raw video as RTP packets (RFC 4175)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGB, RGBA, BGR, BGRA, AYUV, UYVY, I420, Y41B, UYVP }, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)RAW, sampling=(string){ RGB, RGBA, BGR, BGRA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1 }, depth=(string){ 8, 10, 12, 16 }, colorimetry=(string){ BT601-5, BT709-2, SMPTE240M }</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>rtsp</name>
  <description>transfer data via RTSP</description>
  <filename>../../gst/rtsp/.libs/libgstrtsp.so</filename>
  <basename>libgstrtsp.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>rtpdec</name>
      <longname>RTP Decoder</longname>
      <class>Codec/Parser/Network</class>
      <description>Accepts raw RTP and RTCP packets and sends them forward</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>recv_rtcp_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>recv_rtp_sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>recv_rtp_src_%u_%u_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>rtcp_src_%u</name>
          <direction>source</direction>
          <presence>request</presence>
          <details>application/x-rtcp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtspsrc</name>
      <longname>RTSP packet receiver</longname>
      <class>Source/Network</class>
      <description>Receive data over the network via RTSP (RFC 2326)</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;, Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;, Lutz Mueller &lt;lutz@topfrose.de&gt;</author>
      <pads>
        <caps>
          <name>stream_%u</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>application/x-rtp; application/x-rdt</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>shapewipe</name>
  <description>Shape Wipe transition filter</description>
  <filename>../../gst/shapewipe/.libs/libgstshapewipe.so</filename>
  <basename>libgstshapewipe.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>shapewipe</name>
      <longname>Shape Wipe transition filter</longname>
      <class>Filter/Editor/Video</class>
      <description>Adds a shape wipe transition to a video stream</description>
      <author>Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>mask_sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)GRAY8, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)0/1; video/x-raw, format=(string)GRAY16_LE, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)0/1</details>
        </caps>
        <caps>
          <name>video_sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>shout2send</name>
  <description>Sends data to an icecast server using libshout2</description>
  <filename>../../ext/shout2/.libs/libgstshout2.so</filename>
  <basename>libgstshout2.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>libshout2</package>
  <origin>http://www.icecast.org/download.html</origin>
  <elements>
    <element>
      <name>shout2send</name>
      <longname>Icecast network sink</longname>
      <class>Sink/Network</class>
      <description>Sends data to an icecast server</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;, Pedro Corte-Real &lt;typo@netcabo.pt&gt;, Zaheer Abbas Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/ogg; audio/ogg; video/ogg; audio/mpeg, mpegversion=(int)1, layer=(int)[ 1, 3 ]; video/webm; audio/webm</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>smpte</name>
  <description>Apply the standard SMPTE transitions on video images</description>
  <filename>../../gst/smpte/.libs/libgstsmpte.so</filename>
  <basename>libgstsmpte.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>smpte</name>
      <longname>SMPTE transitions</longname>
      <class>Filter/Editor/Video</class>
      <description>Apply the standard SMPTE transitions on video images</description>
      <author>Wim Taymans &lt;wim.taymans@chello.be&gt;</author>
      <pads>
        <caps>
          <name>sink1</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>sink2</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>smptealpha</name>
      <longname>SMPTE transitions</longname>
      <class>Filter/Editor/Video</class>
      <description>Apply the standard SMPTE transitions as alpha on video images</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)YV12, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)ARGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)BGRA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)RGBA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)ARGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)AYUV, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)ARGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)BGRA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)RGBA, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string)ARGB, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>soup</name>
  <description>libsoup HTTP client src/sink</description>
  <filename>../../ext/soup/.libs/libgstsouphttpsrc.so</filename>
  <basename>libgstsouphttpsrc.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>souphttpclientsink</name>
      <longname>HTTP client sink</longname>
      <class>Generic</class>
      <description>Sends streams to HTTP server via PUT</description>
      <author>David Schleef &lt;ds@entropywave.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>souphttpsrc</name>
      <longname>HTTP client source</longname>
      <class>Source/Network</class>
      <description>Receive data as a client over the network via HTTP using SOUP</description>
      <author>Wouter Cloetens &lt;wouter@mind.be&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>spectrum</name>
  <description>Run an FFT on the audio signal, output spectrum data</description>
  <filename>../../gst/spectrum/.libs/libgstspectrum.so</filename>
  <basename>libgstspectrum.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>spectrum</name>
      <longname>Spectrum analyzer</longname>
      <class>Filter/Analyzer/Audio</class>
      <description>Run an FFT on the audio signal, output spectrum data</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, S24LE, S32LE, F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string){ S16LE, S24LE, S32LE, F32LE, F64LE }, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ], layout=(string)interleaved</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>speex</name>
  <description>Speex plugin library</description>
  <filename>../../ext/speex/.libs/libgstspeex.so</filename>
  <basename>libgstspeex.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>speexdec</name>
      <longname>Speex audio decoder</longname>
      <class>Codec/Decoder/Audio</class>
      <description>decode speex streams to audio</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-speex</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 6000, 48000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>speexenc</name>
      <longname>Speex audio encoder</longname>
      <class>Codec/Encoder/Audio</class>
      <description>Encodes audio in Speex format</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 6000, 48000 ], channels=(int)1; audio/x-raw, format=(string)S16LE, layout=(string)interleaved, rate=(int)[ 6000, 48000 ], channels=(int)2, channel-mask=(bitmask)0x0000000000000003</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-speex, rate=(int)[ 6000, 48000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>taglib</name>
  <description>Tag writing plug-in based on taglib</description>
  <filename>../../ext/taglib/.libs/libgsttaglib.so</filename>
  <basename>libgsttaglib.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>apev2mux</name>
      <longname>TagLib-based APEv2 Muxer</longname>
      <class>Formatter/Metadata</class>
      <description>Adds an APEv2 header to the beginning of files using taglib</description>
      <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-apetag</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>id3v2mux</name>
      <longname>TagLib-based ID3v2 Muxer</longname>
      <class>Formatter/Metadata</class>
      <description>Adds an ID3v2 header to the beginning of MP3 files using taglib</description>
      <author>Christophe Fergeau &lt;teuf@gnome.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-id3</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>udp</name>
  <description>transfer data via UDP</description>
  <filename>../../gst/udp/.libs/libgstudp.so</filename>
  <basename>libgstudp.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>dynudpsink</name>
      <longname>UDP packet sender</longname>
      <class>Sink/Network</class>
      <description>Send data over the network via UDP with packet destinations picked up dynamically from meta on the buffers passed</description>
      <author>Philippe Khalaf &lt;burger@speedy.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>multiudpsink</name>
      <longname>UDP packet sender</longname>
      <class>Sink/Network</class>
      <description>Send data over the network via UDP to one or multiple recipients which can be added or removed at runtime using action signals</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>udpsink</name>
      <longname>UDP packet sender</longname>
      <class>Sink/Network</class>
      <description>Send data over the network via UDP</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>udpsrc</name>
      <longname>UDP packet receiver</longname>
      <class>Source/Network</class>
      <description>Receive data over the network via UDP</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;, Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>video4linux2</name>
  <description>elements for Video 4 Linux</description>
  <filename>../../sys/v4l2/.libs/libgstvideo4linux2.so</filename>
  <basename>libgstvideo4linux2.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>v4l2radio</name>
      <longname>Radio (video4linux2) Tuner</longname>
      <class>Tuner</class>
      <description>Controls a Video4Linux2 radio device</description>
      <author>Alexey Chernov &lt;4ernov@gmail.com&gt;</author>
      <pads>
      </pads>
    </element>
    <element>
      <name>v4l2sink</name>
      <longname>Video (video4linux2) Sink</longname>
      <class>Sink/Video</class>
      <description>Displays frames on a video4linux2 device</description>
      <author>Rob Clark &lt;rob@ti.com&gt;,</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/jpeg; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; video/mpeg, mpegversion=(int)2; video/mpegts, systemstream=(boolean)true; video/x-bayer, format=(string){ bggr, gbrg, grbg, rggb }, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-dv, systemstream=(boolean)true; video/x-h263, variant=(string)itu; video/x-h264, stream-format=(string){ byte-stream, avc }, alignment=(string)au; video/x-pwc1, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-pwc2, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string){ RGB16, BGR, RGB, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YV12, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV24, NV61, NV16, NV21, NV12, I420, BGRA, BGRx, ARGB, xRGB, BGR15, RGB15 }, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-sonix, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-vp8; video/x-wmv, wmvversion=(int)3, format=(string)WVC1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>v4l2src</name>
      <longname>Video (video4linux2) Source</longname>
      <class>Source/Video</class>
      <description>Reads frames from a Video4Linux2 device</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Stefan Kost &lt;ensonic@users.sf.net&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/jpeg; video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; video/mpeg, mpegversion=(int)2; video/mpegts, systemstream=(boolean)true; video/x-bayer, format=(string){ bggr, gbrg, grbg, rggb }, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-dv, systemstream=(boolean)true; video/x-h263, variant=(string)itu; video/x-h264, stream-format=(string){ byte-stream, avc }, alignment=(string)au; video/x-pwc1, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-pwc2, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw, format=(string){ RGB16, BGR, RGB, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YV12, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV24, NV61, NV16, NV21, NV12, I420, BGRA, BGRx, ARGB, xRGB, BGR15, RGB15 }, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-sonix, width=(int)[ 1, 32768 ], height=(int)[ 1, 32768 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-vp8; video/x-wmv, wmvversion=(int)3, format=(string)WVC1</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>videobox</name>
  <description>resizes a video by adding borders or cropping</description>
  <filename>../../gst/videobox/.libs/libgstvideobox.so</filename>
  <basename>libgstvideobox.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>videobox</name>
      <longname>Video box filter</longname>
      <class>Filter/Effect/Video</class>
      <description>Resizes a video by adding borders or cropping</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y444, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y444, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>videocrop</name>
  <description>Crops video into a user-defined region</description>
  <filename>../../gst/videocrop/.libs/libgstvideocrop.so</filename>
  <basename>libgstvideocrop.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>aspectratiocrop</name>
      <longname>aspectratiocrop</longname>
      <class>Filter/Effect/Video</class>
      <description>Crops video into a user-defined aspect-ratio</description>
      <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR, AYUV, YUY2, YVYU, UYVY, I420, YV12, RGB16, RGB15, GRAY8, NV12, NV21, GRAY16_LE, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR, AYUV, YUY2, YVYU, UYVY, I420, YV12, RGB16, RGB15, GRAY8, NV12, NV21, GRAY16_LE, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>videocrop</name>
      <longname>Crop</longname>
      <class>Filter/Effect/Video</class>
      <description>Crops video into a user-defined region</description>
      <author>Tim-Philipp Müller &lt;tim centricular net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR, AYUV, YUY2, YVYU, UYVY, I420, YV12, RGB16, RGB15, GRAY8, NV12, NV21, GRAY16_LE, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR, AYUV, YUY2, YVYU, UYVY, I420, YV12, RGB16, RGB15, GRAY8, NV12, NV21, GRAY16_LE, GRAY16_BE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>videofilter</name>
  <description>Video filters plugin</description>
  <filename>../../gst/videofilter/.libs/libgstvideofilter.so</filename>
  <basename>libgstvideofilter.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>gamma</name>
      <longname>Video gamma correction</longname>
      <class>Filter/Effect/Video</class>
      <description>Adjusts gamma on a video stream</description>
      <author>Arwed v. Merkatz &lt;v.merkatz@gmx.net</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, NV12, NV21, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, NV12, NV21, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>videobalance</name>
      <longname>Video balance</longname>
      <class>Filter/Effect/Video</class>
      <description>Adjusts brightness, contrast, hue, saturation on a video stream</description>
      <author>David Schleef &lt;ds@schleef.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B, NV12, NV21 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw(ANY)</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B, NV12, NV21 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]; video/x-raw(ANY)</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>videoflip</name>
      <longname>Video flipper</longname>
      <class>Filter/Effect/Video</class>
      <description>Flips and rotates video</description>
      <author>David Schleef &lt;ds@schleef.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, I420, YV12, IYUV, YUY2, UYVY, YVYU, NV12, NV21, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, I420, YV12, IYUV, YUY2, UYVY, YVYU, NV12, NV21, GRAY8, GRAY16_BE, GRAY16_LE }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>videomedian</name>
      <longname>Median effect</longname>
      <class>Filter/Effect/Video</class>
      <description>Apply a median filter to an image</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>videomixer</name>
  <description>Video mixer</description>
  <filename>../../gst/videomixer/.libs/libgstvideomixer.so</filename>
  <basename>libgstvideomixer.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>videomixer</name>
      <longname>Video mixer 2</longname>
      <class>Filter/Editor/Video/Compositor</class>
      <description>Mix multiple video streams</description>
      <author>Wim Taymans &lt;wim@fluendo.com&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink_%u</name>
          <direction>sink</direction>
          <presence>request</presence>
          <details>video/x-raw, format=(string){ AYUV, BGRA, ARGB, RGBA, ABGR, Y444, Y42B, YUY2, UYVY, YVYU, I420, YV12, NV12, NV21, Y41B, RGB, BGR, xRGB, xBGR, RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ AYUV, BGRA, ARGB, RGBA, ABGR, Y444, Y42B, YUY2, UYVY, YVYU, I420, YV12, NV12, NV21, Y41B, RGB, BGR, xRGB, xBGR, RGBx, BGRx }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>vpx</name>
  <description>VP8 plugin</description>
  <filename>../../ext/vpx/.libs/libgstvpx.so</filename>
  <basename>libgstvpx.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>vp8dec</name>
      <longname>On2 VP8 Decoder</longname>
      <class>Codec/Decoder/Video</class>
      <description>Decode VP8 video streams</description>
      <author>David Schleef &lt;ds@entropywave.com&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-vp8</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>vp8enc</name>
      <longname>On2 VP8 Encoder</longname>
      <class>Codec/Encoder/Video</class>
      <description>Encode VP8 video streams</description>
      <author>David Schleef &lt;ds@entropywave.com&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string)I420, width=(int)[ 1, 16383 ], height=(int)[ 1, 16383 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-vp8, profile=(string){ 0, 1, 2, 3 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>vp9dec</name>
      <longname>On2 VP9 Decoder</longname>
      <class>Codec/Decoder/Video</class>
      <description>Decode VP9 video streams</description>
      <author>David Schleef &lt;ds@entropywave.com&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-vp9</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, YV12, Y42B, Y444 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>vp9enc</name>
      <longname>On2 VP9 Encoder</longname>
      <class>Codec/Encoder/Video</class>
      <description>Encode VP9 video streams</description>
      <author>David Schleef &lt;ds@entropywave.com&gt;, Sebastian Dröge &lt;sebastian.droege@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ I420, YV12 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-vp9, profile=(string){ 0, 1, 2, 3 }</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>waveform</name>
  <description>WaveForm API based plugin</description>
  <filename>../../win32/vs6/release/libgstwaveform.dll</filename>
  <basename>libgstwaveform.dll</basename>
  <version>0.10.4.1</version>
  <license>LGPL</license>
  <source>gst-plugins-bad</source>
  <package>GStreamer Good Plug-ins CVS</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>waveformsink</name>
      <longname>WaveForm audio sink</longname>
      <class>Sink/Audio</class>
      <description>WaveForm audio sink</description>
      <author>Sebastien Moutte &lt;sebastien@moutte.net&gt;</author>
    </element>
  </elements>
</plugin>
<plugin>
  <name>wavenc</name>
  <description>Encode raw audio into WAV</description>
  <filename>../../gst/wavenc/.libs/libgstwavenc.so</filename>
  <basename>libgstwavenc.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>wavenc</name>
      <longname>WAV audio muxer</longname>
      <class>Codec/Muxer/Audio</class>
      <description>Encode raw audio into WAV</description>
      <author>Iain Holmes &lt;iain@prettypeople.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 65535 ], format=(string){ S32LE, S24LE, S16LE, U8, F32LE, F64LE }, layout=(string)interleaved; audio/x-alaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]; audio/x-mulaw, rate=(int)[ 8000, 192000 ], channels=(int)[ 1, 2 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-wav; audio/x-rf64</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>wavpack</name>
  <description>Wavpack lossless/lossy audio format handling</description>
  <filename>../../ext/wavpack/.libs/libgstwavpack.so</filename>
  <basename>libgstwavpack.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>wavpackdec</name>
      <longname>Wavpack audio decoder</longname>
      <class>Codec/Decoder/Audio</class>
      <description>Decodes Wavpack audio data</description>
      <author>Arwed v. Merkatz &lt;v.merkatz@gmx.net&gt;, Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-wavpack, depth=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S8, layout=(string)interleaved, channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ]; audio/x-raw, format=(string)S16LE, layout=(string)interleaved, channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ]; audio/x-raw, format=(string)S32LE, layout=(string)interleaved, channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>wavpackenc</name>
      <longname>Wavpack audio encoder</longname>
      <class>Codec/Encoder/Audio</class>
      <description>Encodes audio with the Wavpack lossless/lossy audio codec</description>
      <author>Sebastian Dröge &lt;slomo@circular-chaos.org&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw, format=(string)S32LE, layout=(string)interleaved, channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-wavpack, depth=(int)[ 1, 32 ], channels=(int)[ 1, 8 ], rate=(int)[ 6000, 192000 ], framed=(boolean)true</details>
        </caps>
        <caps>
          <name>wvcsrc</name>
          <direction>source</direction>
          <presence>sometimes</presence>
          <details>audio/x-wavpack-correction, framed=(boolean)true</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>wavparse</name>
  <description>Parse a .wav file into raw audio</description>
  <filename>../../gst/wavparse/.libs/libgstwavparse.so</filename>
  <basename>libgstwavparse.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>wavparse</name>
      <longname>WAV audio demuxer</longname>
      <class>Codec/Demuxer/Audio</class>
      <description>Parse a .wav file into raw audio</description>
      <author>Erik Walthinsen &lt;omega@cse.ogi.edu&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-wav</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/ms-gsm; audio/mpeg, mpegversion=(int)1, layer=(int)3; audio/mpeg, mpegversion=(int)1, layer=(int)2; audio/x-raw, format=(string){ S8, U8, S16LE, U16LE, S24LE, U24LE, S32LE, U32LE }, layout=(string)interleaved; audio/x-vorbis; audio/x-ac3; audio/x-dts; audio/mpeg, mpegversion=(int)4; audio/x-alaw; audio/x-mulaw; audio/x-wms, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)microsoft, block_align=(int)[ 1, 2147483647 ]; audio/x-adpcm, layout=(string)dvi, block_align=(int)[ 1, 2147483647 ]; audio/x-truespeech; audio/x-wma, wmaversion=(int)1, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)2, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-wma, wmaversion=(int)3, bitrate=(int)[ 0, 2147483647 ], block_align=(int)[ 1, 2147483647 ]; audio/x-vnd.sony.atrac3; audio/x-raw, format=(string){ F32LE, F64LE }, layout=(string)interleaved; audio/x-voxware, voxwaretype=(int)117; audio/x-adpcm, layout=(string)dk4; audio/x-adpcm, layout=(string)dk3; audio/x-adpcm, layout=(string)dvi; audio/AMR; audio/AMR-WB; audio/x-siren; application/x-ogg-avi</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>ximagesrc</name>
  <description>X11 video input plugin using standard Xlib calls</description>
  <filename>../../sys/ximage/.libs/libgstximagesrc.so</filename>
  <basename>libgstximagesrc.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>ximagesrc</name>
      <longname>Ximage video source</longname>
      <class>Source/Video</class>
      <description>Creates a screenshot video stream</description>
      <author>Lutz Mueller &lt;lutz@users.sourceforge.net&gt;, Jan Schmidt &lt;thaytan@mad.scientist.com&gt;, Zaheer Merali &lt;zaheerabbas at merali dot org&gt;</author>
      <pads>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw, framerate=(fraction)[ 0/1, 2147483647/1 ], width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], pixel-aspect-ratio=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin><plugin>
  <name>y4menc</name>
  <description>Encodes a YUV frame into the yuv4mpeg format (mjpegtools)</description>
  <filename>../../gst/y4m/.libs/libgsty4menc.so</filename>
  <basename>libgsty4menc.so</basename>
  <version>1.10.1</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>y4menc</name>
      <longname>YUV4MPEG video encoder</longname>
      <class>Codec/Encoder/Video</class>
      <description>Encodes a YUV frame into the yuv4mpeg format (mjpegtools)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw, format=(string){ IYUV, I420, Y42B, Y41B, Y444 }, width=(int)[ 1, 2147483647 ], height=(int)[ 1, 2147483647 ], framerate=(fraction)[ 0/1, 2147483647/1 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-yuv4mpeg, y4mversion=(int)2</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin></plugins>
